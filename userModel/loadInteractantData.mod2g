use '../util/*.pl' as knowledge.
use '../minidialogs/*.pl' as knowledge.
use '../minidialogs/co_creation/*.pl' as knowledge.
use '../minidialogs/robotstories/*.pl' as knowledge.
use '../minidialogs/hero/*.pl' as knowledge.
use '../minidialogs/hero/chitchat/*.pl' as knowledge.
use '../minidialogs/hero/narrative/*.pl' as knowledge.
use '../minidialogs/hero/functional/*.pl' as knowledge.
use '../minidialogs/hero/hospital/*.pl' as knowledge.
use '../minidialogs/hero/co_regulation/*.pl' as knowledge.
use '../minidialogs/hero/stories/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.
use loadInteractantDataHelper as module.

order=linearall.

module loadInteractantData(Minidialog) {
	if bel(userId(UserId))
		then {
			% Load text variables
			forall bel(text(Minidialog, _, Text), getVarsFromText(Text, Keys))
				do loadInteractantDataHelper(Keys).
			
			% Load motions
			forall bel(anim(Minidialog, _, id, Key))
				do getInteractantData(UserId, Key).
			
			% Load audio
			forall bel(audio(Minidialog, _, id, Key))
				do getInteractantData(UserId, Key).
			
			% Load led animations
			forall bel(leds(Minidialog, _, id, Key))
				do insert(waitingForMemoryLed(Key)) + getInteractantData(UserId, Key).
			
			% Load variables for nested minidialogs
			forall bel(insert_minidialog(Minidialog, Move, NestedMinidialog), keyValue(Minidialog, Move, loadUserModel, "true"))
				do loadInteractantData(NestedMinidialog).
			
			% Load variables for conditionals
			forall bel(next(Minidialog, _, Conditionals, _), extractVariablesFromConditionals(Conditionals, Keys))
				do loadInteractantDataHelper(Keys).
			
			% Load values from conditionals because they can be potential variables
			forall bel(next(Minidialog, _, Conditionals, _), extractValuesFromConditionals(Conditionals, Keys))
				do loadInteractantDataHelper(Keys).
		}
}