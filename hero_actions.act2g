use 'util/*.pl' as knowledge.
use 'topics/*.pl' as knowledge.
use 'topics/co_creation/*.pl' as knowledge.
use 'topics/hospital/*.pl' as knowledge.
use 'topics/robotstories/*.pl' as knowledge.

% Basic expressive actions (output modalities)
define say(Text) with
	pre { true }
	post { waitingForEvent('TextDone') }

define sayAnimated(Text) with
	pre { true }
	post { waitingForEvent('TextDone') }
	
define gesture(Gesture) with
	pre { true }
	post { waitingForEvent('GestureDone') }

define playAudio(Url) with
	pre { true }
	post { waitingForEvent('PlayAudioDone') }

% Robot start/stop actions (input modalities)
define startListening(Seconds, Context) with
	pre { true }
	post { waitingForDetection }

define startListening(Seconds) with
	pre { true }
	post { true }
	
define stopListening with
	pre { true }
	post { true }

define startWatching(Seconds) with
	pre { true }
	post { true }
	
define stopWatching with
	pre { true }
	post { true }

define enableRecording with
	pre { true }
	post { true }

define disableRecording with
	pre { true }
	post { true }

define wakeUp with
	pre { true }
	post { waitingForEvent('WakeUpDone') }

define rest with
	pre { true }
	post { waitingForEvent('RestDone')}

define enableBreathing with
	pre { true }
	post { waitingForEvent('BreathingEnabled') }
	
define disableBreathing with
	pre { true }
	post { waitingForEvent('BreathingDisabled') }

define enableBreathing(Bodypart) with
	pre { true }
	post { waitingForEvent('BreathingEnabled') }
	
%define disableBreathing(Bodypart) with
%	pre { true }
%	post { waitingForEvent('BreathingDisabled') }

define goToPosture(Posture) with
	pre { true }
	post { waitingForEvent('GoToPostureDone') }

define goToPosture(Posture, Speed) with
	pre { true }
	post { waitingForEvent('GoToPostureDone') }

define setStiffness(Joints, Stiffness) with
	pre { true }
	post { waitingForEvent('SetStiffnessDone') }

define playMotion(Motion) with
	pre { true }
	post { waitingForEvent('PlayMotionDone') }

define startMotionRecording(Joints) with
	pre { true }
	post { waitingForEvent('RecordMotionStarted') } 

define stopMotionRecording with
	pre { true }
	post { true }

define setLedColor(Leds, Colors) with
	pre { true }
	post { waitingForEvent('LedColorDone') }
	
%define setLedColor(Leds, Colors, Duration) with
%	pre { true }
%	post { waitingForEvent('LedColorDone') }

define startLedAnimation(Group, AnimType, Colors, Speed) with
	pre { true }
	post { waitingForEvent('LedAnimationStarted') }

define stopLedAnimation with
	pre { true }
	post { waitingForEvent('LedAnimationDone') }
	
% Agent external memory / database control
define setSession(ID, SessionId) with
	pre { true }
	post { waitingForEvent('SessionSet') }
	
define addMemoryEntry(ID, Key, Data) with
	pre { true }
	post { waitingForEvent('MemoryEntryStored') }

define setInteractantData(ID, Key, Value) with
	pre { true }
	post { waitingForEvent('InteractantDataSet') }

define getInteractantData(ID, Key) with
	pre { true }
	post { waitingForMemoryData(Key) }

%define deleteInteractant(ID) with
	%pre { true }
	%post { waitingForEvent('InteractantDeleted') }

%define deleteAllInteractants with
	%pre { true }
	%post { waitingForEvent('AllInteractantsDeleted') }
	
% Webpage actions	
define renderPage(Html) with
	pre { true }
	post { true }