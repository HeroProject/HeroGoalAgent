use dialogflow as knowledge.
use dialogflow as actionspec.

module st_event {

	%%% HANDLING INCOMMING ANSWERS %%%
	%% Dialoglow %%
	if percept(intent(I,[]), (I = 'answer_yes' ; I = 'answer_no')), bel(currentState(S), state(S, question, _))
		then insert(answer(S, I)).
	
	%% Bumpers %%
	% Right bumper means yes
		if percept(event('RightBumperPressed')), bel(waitingForEvent('RightBumperPressed'), currentState(S), state(S, question, [type=Type, response=Res]), Res=touch, Type=yesno)
			then insert(answer(S,'answer_yes')) + delete(waitingForEvent('LeftBumperPressed')).
	% Left bumper means no
		if percept(event('LeftBumperPressed')), bel(waitingForEvent('LeftBumperPressed'), currentState(S), state(S, question, [type=Type, response=Res]), Res=touch, Type=yesno)
			then insert(answer(S,'answer_no'))  + delete(waitingForEvent('RightBumperPressed')).
	
	
	%%% HANDLING NAO EVENTS %%%
	if percept(event(E)), not(bel(event(E)))
		then insert(event(E)).
	if bel(event(E)), not(percept(event(E)))
		then delete(event(E)).
	if bel(event(E), waitingForEvent(E))
		then delete(waitingForEvent(E)).


	if percept(timer(S,_)), not(bel(timeout(S)))
		then insert(timeout(S)) + log(timeout(S)).
	if bel(timeout(S)), not(percept(timer(S,_)))
		then delete(timeout(S)).
		
	
	%%% HANDLING STATE EVENTS %%%

	%% State Type Handling%%
	
	% Complete logic for say state: from (1) start to (2) waiting for event 'TextDone' and 'AninDone'??? to (3) completion.
	if bel(currentState(S), state(S, say, _), not(start), not(waitingForEvent(_)))
		then insert(completed(S)).
	
	% Complete logic for question state with speech response: from (1) start to (2) posing the question (waitingForEvent) to (3) waiting for answer to (4) complete.
	if bel(currentState(S), state(S, question, [_, response=Res, context=C]), Res=speech, maxAnswerTime(MAX_AT), not(start), not(waitingForEvent(_)), not(waitingForAnswer))
		then insert(waitingForAnswer) + startListening(C) + starttimer(S,MAX_AT,MAX_AT).
				
	if bel(currentState(S), state(S, question, [_, response=Res, _]), Res=speech, not(start), not(waitingForEvent(_)), waitingForAnswer, answer(S, A))
		then delete(waitingForAnswer, answer(S, A)) + insert(completed(S), nextCondition(A)) + stopListening + canceltimer(S).
		
	% Complete logic for question state with touch response.
	if bel(currentState(S), state(S, question, [type=Type, response=Res]), Res=touch, maxAnswerTime(MAX_AT), not(start), not(waitingForEvent(_)), not(waitingForAnswer)) then {
		%Yesno question
		if bel(Type=yesno)
			then insert(waitingForAnswer, waitingForEvent('RightBumperPressed'), waitingForEvent('LeftBumperPressed')) + starttimer(S,MAX_AT,MAX_AT).
		%Multiple choice (mc) question
		% if bel(Type=mc) TODO
			%then do something else
	}
		
	if bel(currentState(S), state(S, question, [_, response=Res]), Res=touch, not(start), not(waitingForEvent(_)), waitingForAnswer, answer(S, A))
		then delete(waitingForAnswer, answer(S, A)) + insert(completed(S), nextCondition(A)) + canceltimer(S).
	
	%TODO: solve [_, response=touch] versus [_, response=speech, context=C] problem.
	if bel(timeout(S), waitingForAnswer, not(answer(S,_)), currentState(S), state(S, question, [_, response=Res, _]), maxAnswerAttempts(MaxAnswerAttempts), currentAttempt(CurrentAttempt), NextAttempt = CurrentAttempt+1) then {
		if bel(Res=speech, CurrentAttempt < MaxAnswerAttempts)
			then stopListening + delete(waitingForAnswer, currentAttempt(CurrentAttempt)) + insert(start, currentAttempt(NextAttempt)).
		if bel(Res=speech, CurrentAttempt >= MaxAnswerAttempts)
			then stopListening + delete(waitingForAnswer, currentAttempt(CurrentAttempt)) + insert(completed(S), nextCondition('fail'), currentAttempt(0)).
		if bel(Res=touch, CurrentAttempt < MaxAnswerAttempts)
			then delete(waitingForEvent('RightBumperPressed'), waitingForEvent('LeftBumperPressed'), waitingForAnswer, currentAttempt(CurrentAttempt)) + insert(start, currentAttempt(NextAttempt)).
		if bel(Res=touch, CurrentAttempt >= MaxAnswerAttempts)
			then delete(waitingForEvent('RightBumperPressed'), waitingForEvent('LeftBumperPressed'), waitingForAnswer, currentAttempt(CurrentAttempt)) + insert(completed(S), nextCondition('fail'), currentAttempt(0)).
	}
	
	
	%% State Transition Handling %%
	
	% If state completed, then transition to next state.
	if bel(currentState(S1), completed(S1), not(nextCondition(_)), next(S1, _, S2))
		then delete(currentState(S1), completed(S1)) + insert(currentState(S2), start).
	
	% If state completed, then transition to next state given a nextCondition(C)
	if bel(currentState(S1), completed(S1), nextCondition(C), next(S1, C, S2))
		then delete(currentState(S1), completed(S1), nextCondition(C)) + insert(currentState(S2), start).

}