use dialogflow as knowledge.
use script as knowledge.
use dialogflow as actionspec.

module st_event {
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%% Percept processing                %%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% NAO event percepts
	forall percept(event(E)), not(bel(event(E)))
		do insert(event(E)).
	forall bel(event(E)), not(percept(event(E)))
		do delete(event(E)).
	
	% DialogFlow: Processing recognized intents (assuming these are always replies/answers here).
	% Stop listening if we received an answer.
	% Need to check here for cases Params=[] as we sometimes get this from DialogFlow even with required parameters(!?) : (Params=[] -> Type=yesno ; nth0(0, Params, _))
	if percept(intent(Intent, Params)), bel(currentState(S), waitingForAnswer, keyListValues(S, [context, numParams], [Context, NumParams]), length(Params, NumParams))
		then delete(waitingForAnswer) + insert(answer(S, Context, Intent, Params))
			+ stopListening + canceltimer(S) + log(Intent) + log(Params). % (doesn't harm to perform stopListening if robot is not listening)

	%Audio recording
	if percept(audioRecording(FileName)), bel(currentState(S), waitingForAudio)
		then delete(waitingForAudio) + insert(audioRecording(S, FileName)).
	
	%Emotion detection
	if percept(emotionDetected(Emotion)), bel(currentState(S))
		then insert(emotion(S, Emotion)) + delete(waitingForEmotion) + log(Emotion) + stopWatching.

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%% Event and answer logic            %%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% Handling of event waiting logic...
	% ... for NAO events
	if bel(event(E), waitingForEvent(E))
		then delete(waitingForEvent(E)).
	
	% Right bumper means yes and left bumper means no (if current state is yes/no question with touch response).
	if bel(feetBumperEventAnswer(Intent), currentState(S), waitingForAnswer, currentInputModality(touch), keyListValues(S, [type, context], [yesno, Context]))
		then delete(waitingForAnswer) + insert(answer(S, Context, Intent, [])) + canceltimer(S).
		
	% Right bumper means current option is selected (if current state is mc question with touch response).
	if bel(feetBumperEventAnswer('answer_yes'), currentState(S), waitingForAnswer, currentInputModality(touch),
		keyListValues(S, [type, context, options], [Type, Context, Values]), Type \= yesno, mcCounter(C), nth0(C, Values, Answer))
		then delete(waitingForAnswer) + insert(answer(S, Context, Context, [Answer])) + canceltimer(S).
	% Left bumper means current option is NOT selected (if current state is mc question with touch response).
	if bel(feetBumperEventAnswer('answer_no'), currentState(S), waitingForAnswer, currentInputModality(touch),
		not(keyValue(S, type, yesno)), mcCounter(C), Cnew is C + 1)
		then canceltimer(S) + delete(waitingForAnswer, mcCounter(C)) + insert(mcCounter(Cnew)).
		
	% Handle case where we have run out of options for mc question (fail).
	if bel(currentInputModality(touch), mcCounter(C), currentState(S), keyListValues(S, [options, context, maxAnswerAttempts], [Values, Context, MaxAnswerAttempts]), 
		length(Values, L), C=L, currentAttempt(CurrentAttempt))
		then {
			if bel(CurrentAttempt >= MaxAnswerAttempts, keyValue(S, inputModalityOrder, Order), modalityCounter(ModCount), length(Order, NModalities), NewModCount is ModCount + 1)
				then {
				% If there are no other input modalities, this question failed.
					if bel(NModalities=NewModCount, nextCondition(Con), keyValue(S, context, Context))
		 				then delete(waitingForAnswer, nextCondition(Con)) + 
					insert(answer(S, Context, 'fail', []), nextCondition('fail')).
				% If there are other input modalities left, switch modalities.
				if bel(not(NModalities=NewModCount), nth0(NewModCount, Order, NewModality))	
					then delete(currentInputModality(touch), modalityCounter(ModCount), currentAttempt(CurrentAttempt), waitingForAnswer, started)
						+ insert(start, currentInputModality(NewModality), modalityCounter(NewModCount), currentAttempt(1)).
				}
			
			if bel(CurrentAttempt < MaxAnswerAttempts, NextAttempt is CurrentAttempt + 1)
				then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt), mcCounter(C)) + 
					insert(start, currentAttempt(NextAttempt), mcCounter(0)).
		}
		
	% Prepaire the nextCondition (excluding altEnding).
	if bel(currentState(S), not(keyValue(S, altEnding, yes)), not(keyValue(S, branching, yes)), answer(S, _, Intent, _), nextCondition(C), not(C=Intent))
		then delete(nextCondition(C)) + insert(nextCondition(Intent)).
	% Prepaire the nextCondition in the case branching is true and the user answer via the bumpers. %ToDo fix this.
	if bel(currentState(S), not(keyValue(S, altEnding, yes)), keyValue(S, branching, yes), answer(S, _, _, [Answer]), nextCondition(C), not(C=Answer))
		then delete(nextCondition(C)) + insert(nextCondition(Answer)).
	if bel(currentState(S), not(keyValue(S, altEnding, yes)), keyValue(S, branching, yes), answer(S, _, Intent, []), nextCondition(C), not(C=Intent))
		then delete(nextCondition(C)) + insert(nextCondition(Intent)).
	%Prepaire nextConditions for alternative ending.
	if bel(currentState(S), keyListValues(S, [selectEnding, key], [yes, Key]), getAnswer(Key, Answer), nextCondition(C), not(C=Answer))
		then delete(nextCondition(C)) + insert(nextCondition(Answer)).
	% store answers to questions in answers-list (if not already done and question is not yes/no question);
	% assumes reply is a list with single item (Answer).
	% If there is a specific answer store that answer (e.g. Entity recognized).
	if bel(answer(S, Context, _, [Answer]), state(_, S, question), not(keyValue(S, type, yesno)), answers(Answers),
		keyValue(S, context, Context), updateAnswers(Answers, Context, Answer, NewAnswers))
		then delete(answers(Answers)) + insert(answers(NewAnswers)).
	
	% If the intent itself is the answer (and no specific entity is known), store that answer.
	if bel(answer(S, _, Intent, []), not(Intent="fail"), state(_, S, question), not(keyValue(S, type, yesno)), answers(Answers),
		keyValue(S, context, Context), updateAnswers(Answers, Context, Intent, NewAnswers))
		then delete(answers(Answers)) + insert(answers(NewAnswers)).
	
	% If an emotion is expected and present, set that as the next condition.
	if bel(currentState(S), state(_, S, emotion), emotion(S,E), nextCondition(C), not(C=E))
		then delete(nextCondition(C)) + insert(nextCondition(E)).


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%% Timeout logic		              %%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% Detecting timeouts
	if percept(timer(S, _)), not(bel(timeout(S)))
		then insert(timeout(S)).
	if bel(timeout(S)), not(percept(timer(S, _)))
		then delete(timeout(S)).
	if percept(timer(S, _), S \= dialogflow), bel(currentAttempt(CurrentAttempt)) 
		then log(timeout(S, CurrentAttempt)).
	if percept(speechText(Text)), bel(currentState(S), waitingForAnswer, currentAttempt(CurrentAttempt)) % heard something but it didn't match what we want
		then stopListening + canceltimer(S) + canceltimer(dialogflow) + insert(timeout(dialogflow), speechText(S, CurrentAttempt, Text)).

	% Handling timeouts (important to do this after other event processing above!).
	% Adding 1000ms additional waiting time after stop streaming audio to dialogflow.
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, question), timeout(S), waitingForAnswer)
		then stopListening + starttimer(dialogflow, 1000, 1000).
		
	% If this timer has timed out, and we still have no answer, we need to leave the state, and
	% we insert a fake answer for completion but with a 'fail' condition (substituted for default next condition).
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, question), waitingForAnswer,
		timeout(dialogflow), keyValue(S, maxAnswerAttempts, MaxAnswerAttempts), currentInputModality(speech), currentAttempt(CurrentAttempt))
	then {
		%If the number of attempts are reached and the user attempted to answer the first time, the speech recognition part failed.
		if bel(started, CurrentAttempt >= MaxAnswerAttempts, speechText(S, 1, _), keyValue(S, inputModalityOrder, Order), modalityCounter(ModCount), length(Order, NModalities), NewModCount is ModCount + 1)
			then {
				% If there are no input modalities left, this question has failed completly.
				if bel(NModalities=NewModCount, nextCondition(C), keyValue(S, context, Context))
					then delete(waitingForAnswer, nextCondition(C))
						+ insert(answer(S, Context, 'fail', []), nextCondition('fail')).
				% If there are other input modalities left, switch modalities.
				if bel(not(NModalities=NewModCount), nth0(NewModCount, Order, NewModality))	
					then delete(currentInputModality(speech), modalityCounter(ModCount), currentAttempt(CurrentAttempt), waitingForAnswer, started)
						+ insert(start, currentInputModality(NewModality), modalityCounter(NewModCount), currentAttempt(1)).
			}				
		
		%If the number of attempts are reached and the user and if and only if the user did not used the first attempt, the user gets one additional attempt.
		if bel(started, CurrentAttempt >= MaxAnswerAttempts, not(speechText(S, 1, _)), NextAttempt is CurrentAttempt + 1)
			then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt)) + insert(start, currentAttempt(NextAttempt), speechText(S, 1, 'fail')).
		
		%If the number of attempts are not reached, the user will get a next speech recognition attempt.
		if bel(started, CurrentAttempt < MaxAnswerAttempts, NextAttempt is CurrentAttempt + 1)
			then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt)) + insert(start, currentAttempt(NextAttempt)).
	}
	
	% When timeout occures while waiting for a touch based answer option, go to the next answer option.
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, question), currentInputModality(touch), 
	not(keyValue(S, type, yesno)), timeout(S), waitingForAnswer, mcCounter(C), Cnew is C + 1)
		then delete(mcCounter(C), waitingForAnswer) + insert(mcCounter(Cnew)).
	
	% When timeout occurs while waiting for audio, audio recording is completed, so stop listening (and waiting for audio input). 
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, audioInput), timeout(S), waitingForAudio)
		then stopListening + disableRecording.

	% When timeout occurs while waiting for emotion, emotion detection is stopped.
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, emotion), timeout(S), waitingForEmotion, not(emotion(S,_)))
		then stopWatching + insert(emotion(S, 'fail')) + delete(waitingForEmotion).
		
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%% Setting things up for input handling %%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	% Question
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, question), eventsCompleted, currentAttempt(CurrentAttempt), not(waitingForAnswer), not(answer(_, _, _, _)))
	then {
		if bel(currentInputModality(speech))
			then {
				% Start listening (with timeout by starting timer) and set waitingForAnswer flag.
				% when events have been completed (and we're not already waiting for an answer).
				% the first attempt has a different default waiting time than the subsequent attempts.
				if bel(CurrentAttempt == 1, keyListValues(S, [context, maxAnswerTimeFirst], [Context, MAX_AT]))
					then startListening(Context) + starttimer(S, MAX_AT, MAX_AT) + insert(waitingForAnswer).
				
				% answer time for second (and more; depends on maxAnswerAttempt) speech attempts.
				if bel(CurrentAttempt > 1, keyListValues(S, [context, maxAnswerTimeSecond], [Context, MAX_AT]))
					then startListening(Context) + starttimer(S, MAX_AT, MAX_AT) + insert(waitingForAnswer).
			}
		
		if bel(currentInputModality(touch))
			then {
				% Start timer for question state with touch response and set waitingForAnswer flag.
				% when events have been completed (and we're not already waiting for an answer).
				if bel(keyListValues(S, [type, maxAnswerTimeTouch], [yesno, MAX_AT]))
					then starttimer(S,MAX_AT,MAX_AT) + insert(waitingForAnswer).
				
				% Cycle through multiple choice options, start timer for question state with touch response and set waitingForAnswer flag.
				% when events have been completed (and we're not already waiting for an answer).	
				if bel(keyListValues(S, [type, maxAnswerTimeTouch, options], [Type, MAX_AT, Values]), Type \= yesno,
						mcCounter(C), nth0(C, Values, Value), atom_string(Value, String))
					then say(String) + starttimer(S,MAX_AT,MAX_AT) + insert(waitingForAnswer).
			}
	}
	
	% Audiorecording
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, audioInput), not(waitingForAudio), not(audioRecording(S,_)),
		keyListValues(S, [recordTime], [RT]))
		then enableRecording + startListening + starttimer(S, RT, RT) + insert(waitingForAudio).
	
	% Emotion
	if bel(currentTopic(Topic), currentState(S), state(Topic, S, emotion), not(waitingForEmotion), not(emotion(S,_)))
		then startWatching + starttimer(S, 6000, 6000) + insert(waitingForEmotion).

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%% State transition handling            %%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% If the final input modality fails to give an answer, use the default answer if there is any.
	if bel(currentTopic(T), answer(S, _, "fail", []), state(T, S, question), keyListValues(S, [context, defaultAnswer], [Context, Answer]), 
		answers(Answers), updateAnswers(Answers, Context, Answer, NewAnswers))
		then delete(answers(Answers)) + insert(answers(NewAnswers)).

	% If state has been completed,  
	if bel(currentTopic(T), completed(S), nextCondition(C))
	then { % ... clean up (and reset nextCondition to default value 'true') ...
		% Cleanup: remove all answers (if any).
		forall bel(answer(S, Context, Intent, Params)) do delete(answer(S, Context, Intent, Params)).
		
		% Cleanup: remove state specific parameters (if any).	
		if bel(state(T, S, question), modalityCounter(ModCount), currentInputModality(Modality), currentAttempt(Attempt), mcCounter(Count))
			then delete(modalityCounter(ModCount), currentInputModality(Modality), currentAttempt(Attempt), mcCounter(Count)). 
		
		% Cleanup: Remove current, completed state and reset state tracking parameters to their default values.
		if bel(currentState(S), started)
			then delete(currentState(S), started, nextCondition(C))
				+ insert(start, nextCondition('true')).
		
	
		% ... and transition to next state (if there is one) ...
		if bel(next(T, S, C, Snext))
			then insert(currentState(Snext)). % Progress: move to next state
			
		% ... or go to next topic if a topic has been completed (no next state has been specified for the topic).
		if goal(topics(AllTopics)), not(bel(next(T, S, C, _)))
		then {
			if bel(topics(TopicsDone), append(TopicsDone, [T], NewTopicsDone))
				then delete(topics(TopicsDone)) + insert(topics(NewTopicsDone)).
			% get new topic (if any is left).
			if bel(topics(TopicsDone), append(TopicsDone, [H | _], AllTopics))
				then delete(currentTopic(T)) + insert(currentTopic(H), currentState(s1)).
		}
				
		% And, finally, initialize state specific parameters for new state (if any).
		if bel(currentTopic(Tnew), currentState(Snew), state(Tnew, Snew, question), keyValue(Snew, inputModalityOrder, Order), nth0(0, Order, NewModality)) 
			then insert(currentInputModality(NewModality), modalityCounter(0), currentAttempt(1), mcCounter(0)).
	}
}