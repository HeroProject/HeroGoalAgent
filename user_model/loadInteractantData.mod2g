use '../util/*.pl' as knowledge.
use '../topics/*.pl' as knowledge.
use '../topics/co_creation/*.pl' as knowledge.
use '../topics/hospital/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.
use loadInteractantDataHelper as module.

order=linearall.

module loadInteractantData(Topics) {
		if bel(nth0(0, Topics, Topic, RestOfTopics), userId(UserId))
			then {
				% Load text variables
				forall bel(text(Topic, _, Text), split_string(Text, '%', "", TextParts), odd_elements(TextParts, Keys))
					do loadInteractantDataHelper(Keys).
				
				if true then insert(additionalTopics([])).
				
				forall bel(insert_topic(Topic, S, NewTopic), keyValue(Topic, S, loadUserModel, "true"), additionalTopics(AdditionalTopics)) do delete(additionalTopics(AdditionalTopics)) + insert(additionalTopics([NewTopic | AdditionalTopics])).
				
				% Load motions
				forall bel(play_motion(Topic, _, Key)) do getInteractantData(UserId, Key).
				
				% Load audio
				forall bel(audio(Topic, _, recorded, Key), not(waitingForMemoryAudio(Key))) do getInteractantData(UserId, Key) + insert(waitingForMemoryAudio(Key)).
				forall bel(audio(Topic, _, source, Key), not(waitingForMemoryAudio(Key))) do getInteractantData(UserId, Key) + insert(waitingForMemoryAudio(Key)).
				
				% Load led animations
				forall bel(play_led_anim(Topic, _, Key)) do getInteractantData(UserId, Key) + insert(waitingForMemoryLed(Key)).
				
				% Recursive continue with the next topic.
				if not(bel(length(RestOfTopics,0))), bel(additionalTopics(AT), length(AT, 0)) then delete(additionalTopics(AT)) +  loadInteractantData(RestOfTopics).
				if not(bel(length(RestOfTopics,0))), bel(additionalTopics(AT), not(length(AT, 0)), append(AT, RestOfTopics, Combined)) then delete(additionalTopics(AT)) +  loadInteractantData(Combined).
				if bel(length(RestOfTopics,0), additionalTopics(AT), not(length(AT, 0))) then delete(additionalTopics(AT)) +  loadInteractantData(AT).
		}
}