use '../util/*.pl' as knowledge.
use '../minidialogs/*.pl' as knowledge.
use '../minidialogs/co_creation/*.pl' as knowledge.
use '../minidialogs/robotstories/*.pl' as knowledge.
use '../minidialogs/hospital/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.
use nextMinidialog as module.
use selectNextMove as module.

order=linearall.

module nextDialogMove(Minidialog, Move, C) {
	if bel(evenFailSafeActive(true)) then canceltimer(eventFailSafe).
	% ... clean up (and reset nextCondition to default value 'true') ...
	% reset answers processing flag
	if bel(answerProcessed) then delete(answerProcessed).
	
	% Cleanup: remove move specific parameters (if any).	
	if bel(move(Minidialog, Move, question), modalityCounter(ModCount), currentInputModality(Modality), currentAttempt(Attempt), mcCounter(Count))
		then delete(modalityCounter(ModCount), currentInputModality(Modality), currentAttempt(Attempt), mcCounter(Count)). 
	
	% Cleanup: answers have been stored and processed. Temporary placeholder can be removed.
	if bel(answer(Minidialog, Move, Ans, Data)) then delete(answer(Minidialog, Move, Ans, Data)).
	
	% Cleanup: Remove current, completed move and reset move tracking parameters to their default values.
	if bel(currentMove(Move), started)
		then delete(currentMove(Move), started, nextCondition(C))
			+ insert(start, nextCondition('true')).

	% ... and transition to next move (if there is one) ...
	if bel(not(move(Minidialog, Move, continuator)), next(Minidialog, Move, C, NextMove), userId(UserId))
		then insert(currentMove(NextMove)) + setMoveHistory(UserId, NextMove). % Progress: move to next move
	if bel(move(Minidialog, Move, continuator))
		then selectNextMove(Minidialog, Move).
		
	% ... or go to next minidialog if a minidialog has been completed (no next move has been specified for the minidialog).
	if goal(session([])), not(bel(next(Minidialog, Move, _, _))) then nextMinidialog.
				
	% And, finally, initialize move specific parameters for new move (if any).
	if bel(currentMinidialog(MDnew), currentMove(MVnew), move(MDnew, MVnew, question), getInputModalityOrder(MDnew, MVnew, Order), nth0(0, Order, NewModality)) 
		then insert(currentInputModality(NewModality), modalityCounter(0), currentAttempt(1), mcCounter(0)).
}