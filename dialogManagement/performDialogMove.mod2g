use '../util/*.pl' as knowledge.
use '../minidialogs/*.pl' as knowledge.
use '../minidialogs/co_creation/*.pl' as knowledge.
use '../agent_actions' as actionspec.
use '../util/registerEventListeners.mod2g' as module.
use '../util/logging' as module.

order=linearall.

% Performs all action (modalities) at the start of a move Move for minidialog Minidialog.
module performDialogMove(Minidialog, Move) {

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%				DIALOG ATTRIBUTES				%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% Say what needs to be said.
	if bel((text(Minidialog, Move, Text); text_generator(Minidialog, Move, Source), generate_text_from_source(Source, Text)),
			getSpeechSpeed(Minidialog, Move, Speed), replaceVar(Text, Text2), addSpeechSpeed(Text2, Speed, TextProcessed)) 
		then 
		{
			if bel(keyValue(Minidialog, Move, noAnimation, "true")) then say(TextProcessed).
			if not(bel(keyValue(Minidialog, Move, noAnimation, "true"))) then sayAnimated(TextProcessed).
		}

	% Led there be light.
	if bel(leds(Minidialog, Move, direct, Leds, Colors), valueListFromKeyList(Colors, ColorsR)) then setLedColor(Leds, ColorsR).
	if bel(leds(Minidialog, Move, direct, Leds, AnimType, Colors, Speed)) then startLedAnimation(Leds, AnimType, Colors, Speed).
	if bel(leds(Minidialog, Move, id, ID), getUserModelValue(ID, [Leds, colorSelect, Colors, _])) then setLedColor(Leds, Colors).
	if bel(leds(Minidialog, Move, id, ID), getUserModelValue(ID, [Leds, AnimType, Colors, Speed]), AnimType \= colorSelect) then startLedAnimation(Leds, AnimType, Colors, Speed).
	if bel(leds(Minidialog, Move, option, OptionNumber), waitingForLedAnim(ID), animOption(ID, OptionNumber, [Leds, colorSelect, Colors, _])) then setLedColor(Leds, Colors).
	if bel(leds(Minidialog, Move, option, OptionNumber), waitingForLedAnim(ID), animOption(ID, OptionNumber, [Leds, AnimType, Colors, Speed]), AnimType \= colorSelect) then startLedAnimation(Leds, AnimType, Colors, Speed).
	if bel(leds(Minidialog, Move, reset)) then stopLedAnimation.

	% Play motions.
	if bel(anim(Minidialog, Move, onRobot, Anim)) then gesture(Anim).
	if bel(anim(Minidialog, Move, file, Anim)) then playMotion(Anim).
	if bel(anim(Minidialog, Move, id, ID), getUserModelValue(ID, Recording)) then playMotion(Recording).
	if bel(anim(Minidialog, Move, option, OptionNumber), waitingForMotionAnim(ID), animOption(ID, OptionNumber, Motion)) then playMotion(Motion).
	
	% Play audio.
	if bel(audio(Minidialog, Move, file, A)) then playAudio(A).
	if bel(audio(Minidialog, Move, id, ID), getUserModelValue(ID, AudioID)) then playAudio(AudioID).
	if bel(audio(Minidialog, Move, option, OptionNumber), waitingForSoundAnim(ID), animOption(ID, OptionNumber, Sound)) then playAudio(Sound).
	
	% Wake up, rest, and idle.
	if bel(wakeup(Minidialog, Move)) then wakeUp.
	if bel(rest(Minidialog, Move)) then rest + stopLedAnimation.
	
	if bel(idle(Minidialog, Move, 'true')) then setIdle.
	if bel(idle(Minidialog, Move, 'false')) then setNonIdle.
	
	% Set breathing
	if bel(enableBreathing(Minidialog, Move), basePosture('Stand')) then enableBreathing.
	if bel(enableBreathing(Minidialog, Move), basePosture('Sit')) then enableBreathing('Head').
	if bel(disableBreathing(Minidialog, Move)) then disableBreathing.
	
	% Go to posture
	if bel(go_to_posture(Minidialog, Move, Posture, Speed)) then goToPosture(Posture, Speed).
	if bel(go_to_posture(Minidialog, Move, Posture)) then goToPosture(Posture).
	if bel(go_to_posture(Minidialog, Move), basePosture(Posture)) then goToPosture(Posture).
	
	% Set stiffness
	if bel(set_stiffness(Minidialog, Move, Joints, Stiffness)) then setStiffness(Joints, Stiffness).
		
	% Register event listener. Wait the interaction untill the event has thrown.
	if bel(currentMinidialog(Minidialog), currentMove(Move), keyValue(Minidialog, Move, eventListener, Listeners))
		then registerEventListeners(Listeners).
	
	% Waittimer
	if bel(currentMinidialog(Minidialog), currentMove(Move), keyValue(Minidialog, Move, waitTimer, Time))
		then starttimer(waitTimer, Time, Time) + insert(waitingForTimer).
	
	% Gotimer
	if bel(currentMinidialog(Minidialog), currentMove(Move), keyValue(Minidialog, Move, goTimer, Time))
		then starttimer(goTimer, Time, Time).
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%					WEBPAGE						%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% Show text
	if bel((display(Minidialog, Move, RawText, always);
		tabletUse(TabletUse), (TabletUse = always; TabletUse = explicit), display(Minidialog, Move, RawText);
		tabletUse(always), not(display(Minidialog, Move, _)), not(display(Minidialog, Move, _, _)), text(Minidialog, Move, RawText)),
		replaceVar(RawText, Txt), text(Txt, HTxt), move(Minidialog, Move, MoveType))
		then {
			if bel((MoveType \= question; tabletUse(repair)), html(HTxt, Html)) then renderPage(Html).
			
			if bel(MoveType = question, not(tabletUse(repair))) then {
				if bel(keyValue(Minidialog, Move, type, yesno), tablet_yesno(answer_yes, Yes), tablet_yesno(answer_no, No), 
				buttons([Yes, No], Buttons), atom_concat(HTxt, Buttons, TandB), html(TandB, Html))
				then renderPage(Html).	
				
				if bel(keyListValues(Minidialog, Move, [type, options], [input, List]),
				buttons(List, Buttons), atom_concat(HTxt, Buttons, TandB), html(TandB, Html))
				then renderPage(Html).
			}
	}
			
	% Show image
	if bel(image(Minidialog, Move, I), img(I, Img), html(Img, Html)) 
		then renderPage(Html).
	
	% Clear the page otherwise
	%if bel(text(Minidialog, Move, _), not(display(Minidialog, Move, _)), not(image(Minidialog, Move, _)), 
			%not(keyValue(Minidialog, Move, type, _)), html('',Html))
		%then renderPage(Html).
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%					CO-CREATION					%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	%%%% AUDIO %%%%
	% Prepare co-creation of audio
	if bel(prepare_sound_anim(Minidialog, Move), keyListValues(Minidialog, Move, [umVariable, option1, option2, recordTime], [ID, Option1, Option2, RT]), session(Session))
		then 
		{
			if true then delete(session(Session)) + insert(waitingForSoundAnim(ID), animOption(ID, 1, Option1), animOption(ID, 2, Option2), soundConfig(ID, RT)).
			
			if bel(keyValue(Minidialog, Move, continue_with, Continue)) then insert(session([co_sound, Continue | Session])).
			if not(bel(keyValue(Minidialog, Move, continue_with, _))) then insert(session([co_sound | Session])).
		}
	
	% Save result of audio co-creation
	%if bel(save_sound(Minidialog, Move, ID, Sound), userModel(UserModel), updateUserModel(ID, Sound, UserModel, NewUserModel), userId(UserId)) then
			%delete(userModel(UserModel)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, Sound).
	
	if bel(save_sound(Minidialog, Move, OptionNumber), waitingForSoundAnim(ID), animOption(ID, OptionNumber, Sound), soundConfig(ID, RT)) then {
		if bel(userModel(UserModel), updateUserModel(ID, Sound, UserModel, NewUserModel), userId(UserId)) then
			delete(soundConfig(ID, RT), waitingForSoundAnim(ID), userModel(UserModel)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, Sound).
		
		forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
	}
	
	%%%%% MOTIONS %%%%
	% Prepare co-creation of a motion
	if bel(prepare_motion_anim(Minidialog, Move), keyListValues(Minidialog, Move, [umVariable, option1, option2], [ID, Option1, Option2]), session(Session))
		then delete(session(Session)) + insert(session([co_motion | Session]), waitingForMotionAnim(ID), animOption(ID, 1, Option1), animOption(ID, 2, Option2)).
	
	% Co-create motion
	if bel(record_motion(Minidialog, Move, Joints, Duration), Duration > 0, (keyValue(Minidialog, Move, umVariable, ID) ; not(keyValue(Minidialog, Move, umVariable, _)), generateKeyFromMinidialogAndMove(Minidialog, Move, ID))) 
		then insert(waitingForMotionRecording(ID)) + setStiffness(Joints, 0) + startMotionRecording(Joints) + starttimer(recordMotion, Duration, Duration).
		
	if bel(record_motion(Minidialog, Move, Joints, 0))
		then setStiffness(Joints, 0) + startMotionRecording(Joints).
	
	% Save result of motion co-creation
	if bel(save_motion(Minidialog, Move, option, OptionNumber), waitingForMotionAnim(ID), animOption(ID, OptionNumber, Motion)) then {
		if bel(userModel(UserModel), updateUserModel(ID, Motion, UserModel, NewUserModel), userId(UserId)) then
			delete(userModel(UserModel), waitingForMotionAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, Motion).
		
		forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
	}
	
	if bel(save_motion(Minidialog, Move, recording, Joints), (waitingForMotionAnim(ID); not(waitingForMotionAnim(_)), keyValue(Minidialog, Move, umVariable, ID); not(waitingForMotionAnim(_)), not(keyValue(Minidialog, Move, umVariable, _)), generateKeyFromMinidialogAndMove(Minidialog, Move, ID)))
		then {
			if true then stopMotionRecording + setStiffness(Joints, 100) + insert(waitingForMotionRecording(ID)).
			
			if bel(waitingForMotionAnim(ID)) then {
				if true then delete(waitingForMotionAnim(ID)).
				forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
			}
		}
	
	%%%% LED ANIMATIONS %%%%
	% Prepare co-creation of led animation. Set a flag that the next led animation will be linked to this id.
	if bel(prepare_led_anim(Minidialog, Move), not(keyValue(Minidialog, Move, umVariable, _)), generateKeyFromMinidialogAndMove(Minidialog, Move, ID), session(Session))
		then delete(session(Session)) + insert(session([co_led_selection | Session]), waitingForLedAnim(ID)).
	
	if bel(prepare_led_anim(Minidialog, Move), keyListValues(Minidialog, Move, [umVariable, option1, option2], [ID, Option1, Option2]), session(Session))
		then delete(session(Session)) + insert(session([co_led_selection | Session]), waitingForLedAnim(ID), animOption(ID, 1, Option1), animOption(ID, 2, Option2)).
	
	if bel(prepare_led_anim(Minidialog, Move), keyValue(Minidialog, Move, umVariable, ID), not(keyListValues(Minidialog, Move, [option1, option2], [_, _])), session(Session))
		then delete(session(Session)) + insert(session([co_led_creation | Session]), waitingForLedAnim(ID)).

	% Save the led animation configurations.
	% Remove all the downloaded options
	forall bel(save_led_anim(Minidialog, Move, _, _, _, _), waitingForLedAnim(ID), animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
		
	%Save a blinking, alternate, and spinning animations.
	if bel(save_led_anim(Minidialog, Move, Group, AnimType, Colors, Speed), waitingForLedAnim(ID), not(AnimType = colorSelect),
	getUserModelValue(Group, GroupR), getUserModelValue(AnimType, AnimTypeR), valueListFromKeyList(Colors, ColorsR), 
	userModel(UserModel), updateUserModel(ID, [GroupR, AnimTypeR, ColorsR, Speed], UserModel, NewUserModel),
	nested_list_to_string([GroupR, AnimTypeR, ColorsR, Speed], AnimString), userId(UserId)) 
		then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, AnimString).
	
	%Save a color select animation.
	if bel(save_led_anim(Minidialog, Move, Group, AnimType, Colors, Speed), waitingForLedAnim(ID), AnimType = colorSelect, valueListFromKeyList(Colors, ColorsR), 
	userModel(UserModel), updateUserModel(ID, [Group, AnimType, ColorsR, Speed], UserModel, NewUserModel),
	nested_list_to_string([Group, AnimType, ColorsR, Speed], AnimString), userId(UserId)) 
		then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, AnimString).
	
	% Save a led animation option as selected option and remove the remaining options.
	if bel(save_led_anim(Minidialog, Move, OptionNumber), waitingForLedAnim(ID), animOption(ID, OptionNumber, [Group, AnimType, Colors, Speed])) then 
	{
		%Store the selected uptions with the right ID in the local and remote user model.
		if bel(userModel(UserModel), updateUserModel(ID, [Group, AnimType, Colors, Speed], UserModel, NewUserModel),
				nested_list_to_string([Group, AnimType, Colors, Speed], AnimString), userId(UserId)) 
			then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, AnimString).
		
		%Remove all the stored led animation options.
		forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
	} 
	
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%				MINIDIALOG MANAGEMENT			%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	forall bel(insert_minidialog(Minidialog, Move, NestedMinidialog)) do {
    	if bel(session(Session)) then delete(session(Session)) + insert(session([NestedMinidialog | Session])).
	}
	
	forall bel(insert_minidialog_when_active(Minidialog, Move, NestedMinidialog), activeInteraction(_)) do {
    	if bel(session(Session)) then delete(session(Session)) + insert(session([NestedMinidialog | Session])).
	}
	
	if bel(remove_minidialog(Minidialog, Move, MinidialogsToDelete), session(Session), delete_minidialogs(Session, MinidialogsToDelete, UpdatedSession)) then delete(session(Session)) + insert(session(UpdatedSession)).

	if bel(set_max_duration(Minidialog, Move, Duration, Interval), userId(UserId)) 
		then insert(activeInteraction(Duration)) + setInteractantData(UserId, activeInteractionMax, Duration) + setInteractantData(UserId, activeInteractionTime, 0) + starttimer(maxInteractionDuration, Interval, Duration).
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%					Math						%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	% Math sum generation
	if bel(math_generate(Minidialog, Move), getUserModelValue(mathLevel, Level), math_generate_left_right(Level, Left, Right, Answer), userModel(UserModel), updateUserModelList([math_left=Left, math_right=Right, math_answer=Answer], UserModel, NewUserModel))
		then delete(userModel(UserModel)) + insert(userModel(NewUserModel)).
	
	% Math level adaptation
	if bel((math_evaluate(Minidialog, Move, Key, Hint), Key\=noanswer, getUserModelValue(Key, Result); math_evaluate(Minidialog, Move, Result, Hint), Result=noanswer), mathCorrect(Correct), mathCorrectThreshold(Threshold),
		userModel(UserModel), getUserModelValue(mathLevel, Level), userId(UserId)) then
	{
		% Logging after a result
		if bel(Result\=noanswer, valueListFromKeyList([math_left, math_right, math_answer, math_given_answer], [MathLeft, MathRight, CorrectAnswer, GivenAnswer]), mathTime(Time))
			then logging('math_log', [level=Level, left=MathLeft, right=MathRight, correctAnswer=CorrectAnswer, givenAnswer=GivenAnswer, evaluation=Result, time=Time, aantalGoed=Correct, hint=Hint]).
		
		if bel(Result=noanswer, valueListFromKeyList([math_left, math_right, math_answer], [MathLeft, MathRight, CorrectAnswer]), mathTime(Time))
			then logging('math_log', [level=Level, left=MathLeft, right=MathRight, correctAnswer=CorrectAnswer, givenAnswer=Result, evaluation=Result, time=Time, aantalGoed=Correct, hint=Hint]).			
			
		if bel((enableSupport(0); enableSupport(1), Hint=1)) then
		{
			if true then canceltimer(mathTimer).
			
			% After a correct answer increase the level if the number of correct answers for that level exceeds the threshold and a higher level exists.
			if bel(Result=correct, Correct >= Threshold, mathMaxLevel(MaxLevel), Level < MaxLevel, NewLevel is Level + 1, 
					updateUserModel(mathLevel, NewLevel, UserModel, UpdatedUserModel))
				then delete(userModel(UserModel), mathCorrect(Correct)) + insert(userModel(UpdatedUserModel), mathCorrect(0)) + setInteractantData(UserId, mathLevel, NewLevel).
			% After a correct answer and the level threshold is not reached up the answers correct counter.
			if bel(Result=correct, Correct < Threshold, NewCorrect is Correct + 1)
				then delete(mathCorrect(Correct)) + insert(mathCorrect(NewCorrect)).
			% After an incorrect answer and there were prevously correct answers for this level (Correct > 0) then lower the correct counter by 1.
			if bel((Result=incorrect; Result=noanswer), Correct > 0, NewCorrect is Correct - 1)
				then delete(mathCorrect(Correct)) + insert(mathCorrect(NewCorrect)).
			% After an incorrect answer lower the level, if not at lowest level, by 1 if there were no correct answers previously (Correct = 0).
			if bel((Result=incorrect; Result=noanswer), Correct = 0, Level > 0, NewLevel is Level - 1, updateUserModel(mathLevel, NewLevel, UserModel, UpdatedUserModel))
				then delete(userModel(UserModel)) + insert(userModel(UpdatedUserModel)) + setInteractantData(UserId, mathLevel, NewLevel).
		}
		
	}
	
	% Adding math support dialog to math conversation.
	if bel(math_support(Minidialog, Move), session(Session), mathSupportStrategy(OldStrategy)) then 
	{
		if bel(enableSupport(1), getUserModelValue(mathLevel, Level), valueListFromKeyList([math_left, math_right], [MathLeft, MathRight]),  math_get_hintstrategy(Level, MathLeft, MathRight, Strategy), userModel(UserModel)) then
		{
		
			if true then delete(mathSupportStrategy(OldStrategy)) + insert(mathSupportStrategy(Strategy)).
			
			if bel(Strategy=tafel_rij)
				then delete(session(Session), mathSupportStrategy(OldStrategy)) + insert(session([math_help_tafel_rij | Session])).
			
			if bel(Strategy=steunsom, math_generate_hint_steunsom(MathLeft, MathRight, Steunsom, Steunanswer, Richting),
					updateUserModelList([math_steunsom=Steunsom, math_steunsom_answer=Steunanswer, math_steunsom_richting=Richting], UserModel, UpdatedUserModel))
				then delete(userModel(UserModel), session(Session), mathSupportStrategy(OldStrategy)) + insert(userModel(UpdatedUserModel), session([math_help_steunsom | Session])).
			
			if bel(Strategy=verdubbelen_4, math_generate_hint_verdubbelen(MathLeft, MathRight, [DoubleAnswer2]), 
						updateUserModelList([math_double_2_answer=DoubleAnswer2], UserModel, UpdatedUserModel))
					then delete(userModel(UserModel), session(Session), mathSupportStrategy(OldStrategy)) + insert(userModel(UpdatedUserModel), session([math_help_double_4 | Session])).
					
			if bel(Strategy=verdubbelen_8,  math_generate_hint_verdubbelen(MathLeft, MathRight, [DoubleAnswer2, DoubleAnswer4]), 
					updateUserModelList([math_double_2_answer=DoubleAnswer2, math_double_4_answer=DoubleAnswer4], UserModel, UpdatedUserModel))
				then delete(userModel(UserModel), session(Session), mathSupportStrategy(OldStrategy)) + insert(userModel(UpdatedUserModel), session([math_help_double_8 | Session])).
					
			if bel(Strategy=split_7, math_generate_hint_split_7(MathRight, SplitAnswer2, SplitAnswer5),
					updateUserModelList([math_split7_2=SplitAnswer2, math_split7_5=SplitAnswer5], UserModel, UpdatedUserModel))
				then delete(userModel(UserModel), session(Session), mathSupportStrategy(OldStrategy)) + insert(userModel(UpdatedUserModel), session([math_help_split_7 | Session])). 
			
			if bel(Strategy=splitsen, math_generate_hint_splitsen(MathLeft, MathRight, MathSplitsenBig, MathSplitsenAnswerBig, MathSplitsenSmall, MathSplitsenAnswerSmall), 
					updateUserModelList([math_splitsen_big=MathSplitsenBig, math_splitsen_answer_big=MathSplitsenAnswerBig, math_splitsen_small=MathSplitsenSmall, math_splitsen_answer_small=MathSplitsenAnswerSmall], UserModel, UpdatedUserModel))
				then delete(userModel(UserModel), session(Session), mathSupportStrategy(OldStrategy)) + insert(userModel(UpdatedUserModel), session([math_help_splitsen | Session])).
			
			if bel(Strategy=kleine_som_1000, math_generate_hint_kleine_som(MathLeft, MathRight, Som1, Answer1, Som10, Answer10, Som100, Answer100), updateUserModelList([math_kleine_som_1=Som1, math_klein_som_1_answer=Answer1,
					math_kleine_som_10=Som10, math_klein_som_10_answer=Answer10, math_kleine_som_100=Som100, math_klein_som_100_answer=Answer100], UserModel, UpdatedUserModel))
					then delete(userModel(UserModel), session(Session)) + insert(userModel(UpdatedUserModel), session([math_help_kleine_som_1000 | Session])).
			
			if bel(Strategy=kleine_som_100, math_generate_hint_kleine_som(MathLeft, MathRight, _, _, Som1, Answer1, Som10, Answer10), updateUserModelList([math_kleine_som_1=Som1, math_klein_som_1_answer=Answer1,
					math_kleine_som_10=Som10, math_klein_som_10_answer=Answer10], UserModel, UpdatedUserModel))
				then delete(userModel(UserModel), session(Session)) + insert(userModel(UpdatedUserModel), session([math_help_kleine_som_100 | Session])).
			
			if bel(Strategy=kleine_som_10, math_generate_hint_kleine_som(MathLeft, MathRight, _, _, _, _, Som1, Answer1), updateUserModelList([math_kleine_som_1=Som1, math_klein_som_1_answer=Answer1],
					 UserModel, UpdatedUserModel))
				then delete(userModel(UserModel), session(Session)) + insert(userModel(UpdatedUserModel), session([math_help_kleine_som_10 | Session])).
			
			if bel(Strategy=none) then delete(session(Session)) + insert(session([math_help_none | Session])).
		} 
		
		if bel(enableSupport(0)) then delete(session(Session)) + insert(session([math_no_help | Session])).
	}
	
	% Adding math support strategy explanation to math conversation.
	if bel(math_explain_hints(Minidialog, Move), session(Session), mathSupportStrategy(Strategy)) then
	{
		if bel(Strategy=tafel_rij) then delete(session(Session)) + insert(session([math_help_tafel_rij_uitleg | Session])).
		if bel(Strategy=steunsom) then delete(session(Session)) + insert(session([math_help_steunsom_uitleg | Session])).
		if bel(Strategy=verdubbelen_4) then delete(session(Session)) + insert(session([math_help_double_4_uitleg | Session])).
		if bel(Strategy=verdubbelen_8) then delete(session(Session)) + insert(session([math_help_double_8_uitleg | Session])).
		if bel(Strategy=split_7) then delete(session(Session)) + insert(session([math_help_split_7_uitleg | Session])).
		if bel(Strategy=splitsen) then delete(session(Session)) + insert(session([math_help_splitsen_uitleg | Session])).
		if bel(Strategy=kleine_som_1000) then delete(session(Session)) + insert(session([math_help_kleine_som_1000_uitleg | Session])).
		if bel(Strategy=kleine_som_100) then delete(session(Session)) + insert(session([math_help_kleine_som_100_uitleg | Session])).
		if bel(Strategy=kleine_som_10) then delete(session(Session)) + insert(session([math_help_kleine_som_10_uitleg | Session])).
	}
	
	% Start math timer
	if bel(math_start_timer(Minidialog, Move)) then starttimer(mathTimer, 1000, 600000) + logging('math_log', [start=now]).
	
	%%% Tablet math
	if bel(display_math(Minidialog, Move), valueListFromKeyList([math_left, math_right], Values),
			show_math(Values, MathHtml), html(MathHtml, Html))
		then renderPage(Html).
	
	if bel(display_math_with_answer(Minidialog, Move), valueListFromKeyList([math_left, math_right, math_answer], Values),
			show_math_with_answer(Values, MathHtml), html(MathHtml, Html))
		then renderPage(Html).
	
	if bel(display_math_hints(Minidialog, Move), valueListFromKeyList([math_left, math_right], Values), mathSupportStrategy(Strategy)) then
	{
		
		if bel(Strategy=steunsom, valueListFromKeyList([math_steunsom], Hints),
				show_math_with_hints(Values, left, Hints, MathHtml), html(MathHtml, Html))
			then renderPage(Html). 
		
		if bel(Strategy=verdubbelen_4,
				show_math_with_hints(Values, left, [2], MathHtml), html(MathHtml, Html))
			then renderPage(Html).
		
		if bel(Strategy=verdubbelen_8,
				show_math_with_hints(Values, left, [2, 4], MathHtml), html(MathHtml, Html))
			then renderPage(Html).
		
		if bel(Strategy=split_7,
				show_math_with_hints(Values, left, [2, 5], MathHtml), html(MathHtml, Html))
			then renderPage(Html). 
		
		if bel(Strategy=splitsen, valueListFromKeyList([math_splitsen_big, math_splitsen_small], Hints),
				show_math_with_hints(Values, right, Hints, MathHtml), html(MathHtml, Html))
			then renderPage(Html). 
		
		if bel(Strategy=kleine_som_1000, valueListFromKeyList([math_kleine_som_100, math_kleine_som_10, math_kleine_som_1], Hints),
					show_math_with_hints(Values, right, Hints, MathHtml), html(MathHtml, Html)) 
				then renderPage(Html).
		
		if bel(Strategy=kleine_som_100, valueListFromKeyList([math_kleine_som_10, math_kleine_som_1], Hints),
					show_math_with_hints(Values, right, Hints, MathHtml), html(MathHtml, Html)) 
				then renderPage(Html). 
		
		if bel(Strategy=kleine_som_10, valueListFromKeyList([math_kleine_som_1], Hints),
					show_math_with_hints(Values, right, Hints, MathHtml), html(MathHtml, Html)) 
				then renderPage(Html). 
	}
	
	if bel(display_math_hints_with_answers(Minidialog, Move), valueListFromKeyList([math_left, math_right, math_answer], [MathLeft, MathRight, MathAnswer]), mathSupportStrategy(Strategy)) then
	{
		
		if bel(Strategy=tafel_rij, show_math_with_answer([MathLeft, MathRight, MathAnswer], MathHtml), html(MathHtml, Html))
			then renderPage(Html).
		
		if bel(Strategy=steunsom, valueListFromKeyList([math_steunsom, math_steunsom_answer], [Hint, HintAnswer]),
				show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [Hint], [HintAnswer], MathHtml), html(MathHtml, Html))
			then renderPage(Html).
			
		if bel(Strategy=verdubbelen_4, valueListFromKeyList([math_double_2_answer], HintAnswer),
				show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [2], HintAnswer, MathHtml), html(MathHtml, Html))
			then renderPage(Html).
		
		if bel(Strategy=verdubbelen_8, valueListFromKeyList([math_double_2_answer, math_double_4_answer], HintAnswer),
				show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [2, 4], HintAnswer, MathHtml), html(MathHtml, Html))
			then renderPage(Html).	
		
		if bel(Strategy=split_7, valueListFromKeyList([math_split7_2, math_split7_5], HintAnswers),
				show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [2, 5], HintAnswers, MathHtml), html(MathHtml, Html))
			then renderPage(Html).	
		
		if bel(Strategy=splitsen, valueListFromKeyList([math_splitsen_big, math_splitsen_small], [Big, Small]), BigAnswer is MathLeft * Big, SmallAnswer is MathLeft * Small,
				show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [Big, Small], [BigAnswer, SmallAnswer], MathHtml), html(MathHtml, Html))
			then renderPage(Html). 
		
		if bel(Strategy=kleine_som_1000, valueListFromKeyList([math_kleine_som_1, math_kleine_som_10, math_kleine_som_100, math_klein_som_1_answer, math_klein_som_10_answer, math_klein_som_100_answer], 
				[Som1, Som10, Som100, Answer1, Answer10, Answer100]), show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [Som100, Som10, Som1], [Answer100, Answer10, Answer1], MathHtml), html(MathHtml, Html)) 
			then renderPage(Html).
		
		if bel(Strategy=kleine_som_100, valueListFromKeyList([math_kleine_som_1, math_kleine_som_10, math_klein_som_1_answer, math_klein_som_10_answer], 
				[Som1, Som10, Answer1, Answer10]), show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [Som10, Som1], [Answer10, Answer1], MathHtml), html(MathHtml, Html)) 
			then renderPage(Html).
		
		if bel(Strategy=kleine_som_10, valueListFromKeyList([math_kleine_som_1, math_klein_som_1_answer], 
				[Som1, Answer1]), show_math_with_hints_with_answers([MathLeft, MathRight, MathAnswer], [Som1], [Answer1], MathHtml), html(MathHtml, Html)) 
			then renderPage(Html).
	}
		

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%				 	OTHER						%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	if bel(keyValue(Minidialog, Move, delay, Delay)) then insert(waitingForDelay) + starttimer(delay, Delay, Delay).
	
	%Remove start to prevent repeating the execution of this module (again) and record that robot action has started.
	if true then delete(start) + insert(started).
}