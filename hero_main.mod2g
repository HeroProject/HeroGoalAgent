use 'util/*.pl' as knowledge.
use 'topics/*.pl' as knowledge.
use 'topics/hospital/*.pl' as knowledge.
use sessions as knowledge.
use hero_actions as actionspec.
use 'stateLogic/performStateActions' as module.
use 'user_model/*.mod2g' as module.

module hero_main {
	% Adapt topic goal if all the necessary information is loaded from the database.
	if not(goal(topics([]))) then {
		if bel(useGui(true), not(waitingForGuiData(_)), waitingForInit) then initializeUserModel.
	
		if bel(not(waitingForInit), waitingForSession, memoryTasksCompleted, sessionId(SessionId), sessionOrder(SessionOrder),
		nth1(SessionId, SessionOrder, SessionLabel), session(SessionLabel, Topics), nth0(0, Topics, FirstTopic, RestOfTopics)) 
			then insert(currentTopic(FirstTopic), topics(RestOfTopics)) + delete(waitingForSession) + loadInteractantData(Topics) + adopt(topics([])).
	}
	
	% Execute the state actions
	if bel(currentTopic(T), currentState(S), readyForAction(T, S), not(paused)) then performStateActions(T, S).
	
	%TODO: make pretty
	if bel(pause_act) then delete(pause_act) + say("Ik ga even pauze houden.") + rest + stopLedAnimation. 
	if bel(unpause_act) then delete(unpause_act, paused) + wakeUp + say("Laten we weer verder gaan.").
	if bel(stop_act) then delete(stop_act) + say("Weltrusten") + rest + stopLedAnimation.
}
	
	