use 'util/*.pl' as knowledge.
use 'topics/*.pl' as knowledge.
use sessions as knowledge.
use hero_actions as actionspec.
use 'stateLogic/performStateActions' as module.
use 'memory/loadUserData' as module.

module hero_main {
	% Adapt topic goal if all the necessary information is loaded from the database. 
	if not(goal(topics([]))), bel(waitingForUserModelInit, memoryTasksCompleted, multiSession(MultiSession)) then {
		
		if bel(MultiSession = true, getUserModelValue('session_number', SessionNumber), sessionOrder(SessionOrder), 
		nth1(SessionNumber, SessionOrder, SessionID), session(SessionID, Topics), nth0(0, Topics, FirstTopic, RestOfTopics))
			then delete(waitingForUserModelInit) + insert(currentTopic(FirstTopic), topics(RestOfTopics)) 
				+ loadUserData(Topics) + adopt(topics([])).
		
		if bel(MultiSession = false, sessionOrder(SessionOrder), nth1(1, SessionOrder, SessionID), session(SessionID, Topics), nth0(0, Topics, FirstTopic, RestOfTopics))
			then delete(waitingForUserModelInit) + insert(currentTopic(FirstTopic), topics(RestOfTopics)) 
				+ loadUserData(Topics) + adopt(topics([])).  
	}
	
	% Execute the state actions
	if bel(currentTopic(T), currentState(S), readyForAction(T, S), not(paused)) then performStateActions(T, S).
	
	if bel(pause_act) then rest + say("Ik ben even gepauzeerd") + delete(pause_act).
	
	if bel(unpause_act) then wakeUp + say("Ik ga weer verder") + delete(unpause_act, paused).
}
	
	