use '../util/*.pl' as knowledge.
use '../topics/*.pl' as knowledge.
use '../topics/co_creation/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.

order=linearall.

% Performs all action (modalities) at the start of a state S for topic T.
module performStateActions(T, S) {
	% Set led colors.
	if bel(leds(T, S, Leds, Colors)) then
	{
		if bel(keyValue(T, S, ledRemoteSource, "true"), valueListFromKeyList(Colors, ColorsR)) then setLedColor(Leds, ColorsR).
		if not(bel(keyValue(T, S, ledRemoteSource, "true"))) then setLedColor(Leds, Colors).
	} 
	% Say what needs to be said.
	if bel(text(T, S, Text), keyValue(T, S, speechSpeed, Speed), replaceVar(Text, Text2), addSpeechSpeed(Text2, Speed, TextProcessed)) then 
	{
		if bel(keyValue(T, S, noAnimation, "true")) then say(TextProcessed).
		if not(bel(keyValue(T, S, noAnimation, "true"))) then sayAnimated(TextProcessed).
	}
	% Perform gesture.
	if bel(anim(T, S, G)) then gesture(G).
	% Play audio from server.
	if bel(audio(T, S, server, A)) then playAudio(A).
	% Play recorded audio.
	if bel(audio(T, S, recorded, Source), nth0(0, Source, Tsource), nth0(1, Source, Ssource), audioRecording(Tsource, Ssource, A)) then playLoadedAudio(A).
	% Wake up.
	if bel(wakeup(T, S)) then wakeUp.
	% Rest
	if bel(rest(T, S)) then rest + clearLoadedAudio.
	% Set breathing
	if bel(enableBreathing(T, S)) then enableBreathing.
	if bel(disableBreathing(T, S)) then disableBreathing.
	% Go to posture
	if bel(goToPosture(T, S, Posture, Speed)) then goToPosture(Posture, Speed).
	% Set stiffness
	if bel(goToPosture(T, S, Posture)) then goToPosture(Posture).
		if bel(set_stiffness(T, S, Joints, Stiffness)) then setStiffness(Joints, Stiffness).
	% Record motion
	if bel(record_motion_timer(T, S, Joints, Duration), generateKeyFromTopicAndState(T, S, ID)) 
		then insert(waitingForMotionRecording(ID)) + setStiffness(Joints, 0) + startMotionRecording(Joints) + starttimer(recordMotion, Duration, Duration).
	if bel(start_motion_recording(T, S, Joints))
		then setStiffness(Joints, 0) + startMotionRecording(Joints).
	if bel(stop_motion_recording(T, S, Joints), generateKeyFromTopicAndState(T, S, ID)) then stopMotionRecording + setStiffness(Joints, 100) + insert(waitingForMotionRecording(ID)).
	% Play motion
	%if bel(play_motion(T, S, Source), nth0(0, Source, Tsource), nth0(1, Source, Ssource), generateKeyFromTopicAndState(Tsource, Ssource, ID), motionRecording(ID, Recording))
	if bel(play_motion(T, S, ID), motionRecording(ID, Recording))
		then playMotion(Recording).
		
	if bel(play_motion_file(T, S, Path)) then playMotionFile(Path).
	
	% Led animation
	% Set a flag that the next led animation will be linked to this id.
	if bel(prepare_led_anim(T, S), generateKeyFromTopicAndState(T, S, ID), topics(AllTopics)) then delete(topics(AllTopics)) + insert(topics([co_led_selection | AllTopics]), waitingForLedAnim(ID)).
	
	% Save the led animation configurations. First is only a color select. Second are blinking, alternate, and spinning animations.
	if bel(save_led_anim(T, S, Group, AnimType, Colors, Speed), waitingForLedAnim(ID), not(AnimType = colorSelect),
	getUserModelValue(Group, GroupR), getTranslation(GroupR, GroupTR), getUserModelValue(AnimType, AnimTypeR), getTranslation(AnimTypeR, AnimTypeTR), valueListFromKeyList(Colors, ColorsR), 
	userModel(UserModel), updateUserModel(ID, [GroupTR, AnimTypeTR, ColorsR, Speed], UserModel, NewUserModel)) 
		then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)).
	
	if bel(save_led_anim(T, S, Group, AnimType, Colors, Speed), waitingForLedAnim(ID), AnimType = colorSelect, valueListFromKeyList(Colors, ColorsR), 
	userModel(UserModel), updateUserModel(ID, [Group, AnimType, ColorsR, Speed], UserModel, NewUserModel)) 
		then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)).
	
	% Start led animation from configurations stored in user model.
	if bel(play_led_anim(T, S, ID), getUserModelValue(ID, [Group, AnimType, Colors, Speed])) then 
	{
		if bel(AnimType = colorSelect) then setLedColor(Group, Colors).
		if not(bel(AnimType = colorSelect)) then startLedAnimation(Group, AnimType, Colors, Speed).
	}
	
	% Start led animation with given configurations.
	if bel(start_led_anim(T, S, Group, AnimType, Colors, Speed)) then
	{
		if bel(keyValue(T, S, ledRemoteSource, "true"), getUserModelValue(Group, GroupR), getTranslation(GroupR, GroupTR), getUserModelValue(AnimType, AnimTypeR), getTranslation(AnimTypeR, AnimTypeTR), valueListFromKeyList(Colors, ColorsR)) 
			then startLedAnimation(GroupTR, AnimTypeTR, ColorsR, Speed).
		if not(bel(keyValue(T, S, ledRemoteSource, "true"))) then startLedAnimation(Group, AnimType, Colors, Speed).
	}
	% Stop currently running led animation.
	if bel(stop_led_anim(T, S)) then stopLedAnimation.
	
	% Remove start to prevent repeating the execution of this module (again) and record that robot action has started.
	if true then delete(start) + insert(started).
}