use '../util/*.pl' as knowledge.
use '../topics/*.pl' as knowledge.
use '../topics/co_creation/*.pl' as knowledge.
use '../topics/robotstories/*.pl' as knowledge.
use '../topics/hospital/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.

order=linearall.

% Performs all action (modalities) at the start of a state S for topic T.
module performStateActions(T, S) {
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%				DIALOG ATTRIBUTES				%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% Say what needs to be said.
	if bel(text(T, S, Text), keyValue(T, S, speechSpeed, Speed), replaceVar(Text, Text2), addSpeechSpeed(Text2, Speed, TextProcessed)) then 
	{
		if bel(keyValue(T, S, noAnimation, "true")) then say(TextProcessed).
		if not(bel(keyValue(T, S, noAnimation, "true"))) then sayAnimated(TextProcessed).
	}

	% Led there be light.
	if bel(leds(T, S, direct, Leds, Colors), valueListFromKeyList(Colors, ColorsR)) then setLedColor(Leds, ColorsR).
	if bel(leds(T, S, direct, Leds, AnimType, Colors, Speed)) then startLedAnimation(Leds, AnimType, Colors, Speed).
	if bel(leds(T, S, id, ID), getUserModelValue(ID, [Leds, colorSelect, Colors, _])) then setLedColor(Leds, Colors).
	if bel(leds(T, S, id, ID), getUserModelValue(ID, [Leds, AnimType, Colors, Speed]), AnimType \= colorSelect) then startLedAnimation(Leds, AnimType, Colors, Speed).
	if bel(leds(T, S, option, OptionNumber), waitingForLedAnim(ID), animOption(ID, OptionNumber, [Leds, colorSelect, Colors, _])) then setLedColor(Leds, Colors).
	if bel(leds(T, S, option, OptionNumber), waitingForLedAnim(ID), animOption(ID, OptionNumber, [Leds, AnimType, Colors, Speed]), AnimType \= colorSelect) then startLedAnimation(Leds, AnimType, Colors, Speed).
	if bel(leds(T, S, reset)) then stopLedAnimation.

	% Play motions.
	if bel(anim(T, S, onRobot, Anim)) then gesture(Anim).
	if bel(anim(T, S, file, Anim)) then playMotion(Anim).
	if bel(anim(T, S, id, ID), getUserModelValue(ID, Recording)) then playMotion(Recording).
	if bel(anim(T, S, option, OptionNumber), waitingForMotionAnim(ID), animOption(ID, OptionNumber, Motion)) then playMotion(Motion).
	
	% Play audio.
	if bel(audio(T, S, file, A)) then playAudio(A).
	if bel(audio(T, S, id, ID), getUserModelValue(ID, AudioID)) then playAudio(AudioID).
	if bel(audio(T, S, option, OptionNumber), waitingForSoundAnim(ID), animOption(ID, OptionNumber, Sound)) then playAudio(Sound).
	
	% Wake up and rest.
	if bel(wakeup(T, S)) then wakeUp.
	if bel(rest(T, S)) then rest + stopLedAnimation.
	
	% Set breathing
	if bel(enableBreathing(T, S), basePosture('Stand')) then enableBreathing.
	if bel(enableBreathing(T, S), basePosture('Sit')) then enableBreathing('Head').
	if bel(disableBreathing(T, S)) then disableBreathing.
	
	% Go to posture
	if bel(go_to_posture(T, S, Posture, Speed)) then goToPosture(Posture, Speed).
	if bel(go_to_posture(T, S, Posture)) then goToPosture(Posture).
	if bel(go_to_posture(T, S), basePosture(Posture)) then goToPosture(Posture).
	
	% Set stiffness
	if bel(set_stiffness(T, S, Joints, Stiffness)) then setStiffness(Joints, Stiffness).
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%					WEBPAGE						%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	% Show text
	if bel(display(T, S, Txt), text(Txt, HTxt), html(HTxt, Html)) 
		then renderPage(Html).
	% Show image
	if bel(image(T, S, I), img(I, Img), html(Img, Html)) 
		then renderPage(Html).
	% Clear the page otherwise
	if bel(text(T, S, _), not(display(T, S, _)), not(image(T, S, _)), 
			not(keyValue(T, S, type, _)), html('',Html))
		then renderPage(Html).
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%					CO-CREATION					%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	%%%% AUDIO %%%%
	% Prepare co-creation of audio
	if bel(prepare_sound_anim(T, S), keyListValues(T, S, [umVariable, option1, option2, recordTime], [ID, Option1, Option2, RT]), topics(AllTopics))
		then delete(topics(AllTopics)) + insert(topics([co_sound | AllTopics]), waitingForSoundAnim(ID), animOption(ID, 1, Option1), animOption(ID, 2, Option2), soundConfig(ID, RT)).
	
	% Save result of audio co-creation
	if bel(save_sound(T, S, ID, Sound), userModel(UserModel), updateUserModel(ID, Sound, UserModel, NewUserModel), userId(UserId)) then
			delete(userModel(UserModel)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, Sound).
	
	if bel(save_sound(T, S, OptionNumber), waitingForSoundAnim(ID), animOption(ID, OptionNumber, Sound), soundConfig(ID, RT)) then {
		if bel(userModel(UserModel), updateUserModel(ID, Sound, UserModel, NewUserModel), userId(UserId)) then
			delete(soundConfig(ID, RT), waitingForSoundAnim(ID), userModel(UserModel)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, Sound).
		
		forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
	}
	
	%%%%% MOTIONS %%%%
	% Prepare co-creation of a motion
	if bel(prepare_motion_anim(T, S), keyListValues(T, S, [umVariable, option1, option2], [ID, Option1, Option2]), topics(AllTopics))
		then delete(topics(AllTopics)) + insert(topics([co_motion | AllTopics]), waitingForMotionAnim(ID), animOption(ID, 1, Option1), animOption(ID, 2, Option2)).
	
	% Co-create motion
	if bel(record_motion(T, S, Joints, Duration), Duration > 0, (keyValue(T, S, umVariable, ID) ; not(keyValue(T, S, umVariable, _)), generateKeyFromTopicAndState(T, S, ID))) 
		then insert(waitingForMotionRecording(ID)) + setStiffness(Joints, 0) + startMotionRecording(Joints) + starttimer(recordMotion, Duration, Duration).
		
	if bel(record_motion(T, S, Joints, 0))
		then setStiffness(Joints, 0) + startMotionRecording(Joints).
	
	% Save result of motion co-creation
	if bel(save_motion(T, S, option, OptionNumber), waitingForMotionAnim(ID), animOption(ID, OptionNumber, Motion)) then {
		if bel(userModel(UserModel), updateUserModel(ID, Motion, UserModel, NewUserModel), userId(UserId)) then
			delete(userModel(UserModel), waitingForMotionAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, Motion).
		
		forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
	}
	
	if bel(save_motion(T, S, recording, Joints), (waitingForMotionAnim(ID); not(waitingForMotionAnim(_)), keyValue(T, S, umVariable, ID); not(waitingForMotionAnim(_)), not(keyValue(T, S, umVariable, _)), generateKeyFromTopicAndState(T, S, ID)))
		then {
			if true then stopMotionRecording + setStiffness(Joints, 100) + insert(waitingForMotionRecording(ID)).
			
			if bel(waitingForMotionAnim(ID)) then {
				if true then delete(waitingForMotionAnim(ID)).
				forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
			}
		}
	
	%%%% LED ANIMATIONS %%%%
	% Prepare co-creation of led animation. Set a flag that the next led animation will be linked to this id.
	if bel(prepare_led_anim(T, S), not(keyValue(T, S, umVariable, _)), generateKeyFromTopicAndState(T, S, ID), topics(AllTopics))
		then delete(topics(AllTopics)) + insert(topics([co_led_selection | AllTopics]), waitingForLedAnim(ID)).
	
	if bel(prepare_led_anim(T, S), keyListValues(T, S, [umVariable, option1, option2], [ID, Option1, Option2]), topics(AllTopics))
		then delete(topics(AllTopics)) + insert(topics([co_led_selection | AllTopics]), waitingForLedAnim(ID), animOption(ID, 1, Option1), animOption(ID, 2, Option2)).
	
	if bel(prepare_led_anim(T, S), keyValue(T, S, umVariable, ID), not(keyListValues(T, S, [option1, option2], [_, _])), topics(AllTopics))
		then delete(topics(AllTopics)) + insert(topics([co_led_creation | AllTopics]), waitingForLedAnim(ID)).

	% Save the led animation configurations.
	% Remove all the downloaded options
	forall bel(save_led_anim(T, S, _, _, _, _), waitingForLedAnim(ID), animOption(ID, Number, Option)) 
		do delete(animOption(ID, Number, Option)).
		
	% Save a blinking, alternate, and spinning animations.
	if bel(save_led_anim(T, S, Group, AnimType, Colors, Speed), waitingForLedAnim(ID), not(AnimType = colorSelect),
			getUserModelValue(Group, GroupR), getUserModelValue(AnimType, AnimTypeR), valueListFromKeyList(Colors, ColorsR), 
			userModel(UserModel), updateUserModel(ID, [GroupR, AnimTypeR, ColorsR, Speed], UserModel, NewUserModel),
			nested_list_to_string([GroupR, AnimTypeR, ColorsR, Speed], AnimString), userId(UserId)) 
		then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, AnimString).
	
	% Save a color select animation.
	if bel(save_led_anim(T, S, Group, AnimType, Colors, Speed), waitingForLedAnim(ID), AnimType = colorSelect, valueListFromKeyList(Colors, ColorsR), 
			userModel(UserModel), updateUserModel(ID, [Group, AnimType, ColorsR, Speed], UserModel, NewUserModel),
			nested_list_to_string([Group, AnimType, ColorsR, Speed], AnimString), userId(UserId)) 
		then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, AnimString).
	
	% Save a led animation option as selected option and remove the remaining options.
	if bel(save_led_anim(T, S, OptionNumber), waitingForLedAnim(ID), animOption(ID, OptionNumber, [Group, AnimType, Colors, Speed])) then 
	{
		%Store the selected uptions with the right ID in the local and remote user model.
		if bel(userModel(UserModel), updateUserModel(ID, [Group, AnimType, Colors, Speed], UserModel, NewUserModel),
				nested_list_to_string([Group, AnimType, Colors, Speed], AnimString), userId(UserId)) 
			then delete(userModel(UserModel), waitingForLedAnim(ID)) + insert(userModel(NewUserModel)) + setInteractantData(UserId, ID, AnimString).
		
		%Remove all the stored led animation options.
		forall bel(animOption(ID, Number, Option)) do delete(animOption(ID, Number, Option)).
	} 
	
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%				TOPIC MANAGEMENT				%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	forall bel(insert_topic(T, S, Topic)) do {
    	if bel(topics(AllTopics)) then delete(topics(AllTopics)) + insert(topics([Topic | AllTopics])).
	}
	
	if bel(remove_topic(T, S, TopicsToDelete), topics(AllTopics), delete_topics(AllTopics, TopicsToDelete, NewAllTopics)) then delete(topics(AllTopics)) + insert(topics(NewAllTopics)).
	
	%Active eventFailSave if required.	
	if bel(evenFailSafeActive(true)) then starttimer(eventFailSafe, 16000, 16000).
	
	%Remove start to prevent repeating the execution of this module (again) and record that robot action has started.
	if true then delete(start) + insert(started).
}