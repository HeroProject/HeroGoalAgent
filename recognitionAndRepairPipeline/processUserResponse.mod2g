use '../util/*.pl' as knowledge.
use '../topics/*.pl' as knowledge.
use '../topics/co_creation/*.pl' as knowledge.
use '../topics/robotstories/*.pl' as knowledge.
use '../topics/hospital/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.
use '../util/logging' as module.
use repair as module.

module processUserResponse(T, S, Intent, Text, Params) {
	if bel(keyValue(T, S, type, Type), currentAttempt(CurrentAttempt))
		then {
			if bel(currentInputModality(speech))
				then {
					if true then delete(waitingForAnswer) 
						+ logging([topic=T, state=S, action=userResponse, text=Text, intent=Intent, params=Params, modality=speech, currentAttempt=CurrentAttempt]).
									
					% yesno questions -> answer_yes or answer_no are the expected answers.	
					if bel(Type = yesno, length(Params, 0)) then insert(answer(T, S, Intent, [text=Text])).
						
					% input questions -> expects an entity to be returned.
					if bel(Type = input)
						then {
							if bel(length(Params, 1), member((_=Ans), Params)) then {
								if bel(Ans\='') then insert(answer(T, S, Ans, [text=Text])).
								if bel(Ans='') then repair(T,S). %Log
							}
							if bel(length(Params, 0)) then insert(answer(T, S, Intent, [text=Text])).
						}
											
					% quiz questions -> checks whether the answer is correct or not.
					if bel(Type = quiz, length(Params, 1), member((_=Ans), Params), keyValue(T, S, correctAnswer, CorrectAnswer))
						then {
							if bel(Ans\='', member(Ans, CorrectAnswer))
								then insert(answer(T, S, correct, [entity=Ans, text=Text])).
							if bel(Ans\='', not(member(Ans, CorrectAnswer)))
								then insert(answer(T, S, incorrect, [entity=Ans, text=Text])).
							if bel(Ans='') then repair(T,S). %Log
						}
					
					if bel(Type = openend, length(Params, 0))
						then {
							if bel(Text\='') then insert(answer(T, S, any, [text=Text])).
							if bel(Text='') then insert(answer(T, S, failure, [text=''])).
						}
						
					if not(bel(answer(T,S, _, _)))
						then print("Error: no answer was found although it was expected") 
							+ log(noAnswerError(T, S, Intent, Params)).
				}
				
			if bel(currentInputModality(feet))
				then {
					if true then delete(waitingForAnswer) + canceltimer(S) 
						+ setLedColor(['LeftFootLeds', 'RightFootLeds'], ['white', 'white']) 
						+ logging([topic=T, state=S, action=userResponse, text=Text, intent=Intent, params=Params, modality=feet, currentAttempt=CurrentAttempt]).
					
					if bel(Type = yesno)
						then insert(answer(T, S, Intent, [text=Intent])).
					
					if bel(Type \= yesno, Intent = 'answer_yes', keyValue(T, S, options, Options), mcCounter(Count), nth0(Count, Options, Ans))
						then {
							if bel(Type=input)
								then insert(answer(T, S, Ans, [text=Ans])).
							
							if bel(Type=quiz, keyValue(T, S, correctAnswer, CorrectAnswer))
								then {
									if bel(member(Ans, CorrectAnswer))
										then insert(answer(T, S, correct, [entity=Ans, text=Ans])).
									if bel(not(member(Ans, CorrectAnswer)))
										then insert(answer(T, S, incorrect, [entity=Ans, text=Ans])).
								}
						}
					
					if bel(Type \= yesno, Intent = 'answer_no')
						then repair(T,S).
				}
			
			if bel(currentInputModality(tablet))
				then {
					if true then delete(waitingForAnswer) 
						+ logging([topic=T, state=S, action=userResponse, text=Text, intent=Intent, params=Params, modality=tablet, currentAttempt=CurrentAttempt]).
									
					% yesno questions -> answer_yes or answer_no are the expected answers.	
					if bel(Type = yesno, length(Params, 0)) then insert(answer(T, S, Intent, [text=Text])).
						
					% input questions -> expects an entity to be returned.
					if bel(Type = input)
						then {
							if bel(length(Params, 1), member((_=Ans), Params)) then insert(answer(T, S, Ans, [text=Text])).
							if bel(length(Params, 0)) then insert(answer(T, S, Intent, [text=Text])).
						}
						
					if bel(Type = sorter) then insert(answer(T, S, Intent, [text=Text])).
					
					% quiz questions -> checks whether the answer is correct or not.
					if bel(Type = quiz, length(Params, 1), member((_=Ans), Params), keyValue(T, S, correctAnswer, CorrectAnswer))
						then {
							if bel(member(Ans, CorrectAnswer))
								then insert(answer(T, S, correct, [entity=Ans, text=Text])).
							if not(bel(member(Ans, CorrectAnswer)))
								then insert(answer(T, S, incorrect, [entity=Ans, text=Text])).
						}
						
					if not(bel(answer(T,S, _, _)))
						then print("Error: no answer was found although it was expected") 
							+ log(noAnswerError(T, S, Intent, Params)).
				}
		}
}