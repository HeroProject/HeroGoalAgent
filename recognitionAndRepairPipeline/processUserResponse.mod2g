use '../util/*.pl' as knowledge.
use '../minidialogs/*.pl' as knowledge.
use '../minidialogs/co_creation/*.pl' as knowledge.
use '../agent_actions' as actionspec.
use '../util/logging' as module.
use repair as module.

module processUserResponse(Minidialog, Move, Intent, Text, Params) {
	if bel(keyValue(Minidialog, Move, type, Type), currentAttempt(CurrentAttempt))
		then {
			if bel(currentInputModality(speech))
				then {
					if true then delete(waitingForAnswer) + logging([minidialog=Minidialog, move=Move, action=userResponse, text=Text, intent=Intent, params=Params, modality=speech, currentAttempt=CurrentAttempt]).
									
					% yesno questions -> answer_yes or answer_no are the expected answers.	
					if bel(Type=yesno, length(Params, 0)) then insert(answer(Minidialog, Move, Intent, [text=Text])).
						
					% input questions -> expects an entity to be returned.
					if bel(Type=input)
						then {
							if bel(length(Params, 1), member((_=Ans), Params)) then {
								if bel(number(Ans), Intent='integer', AnsI is integer(Ans)) then insert(answer(Minidialog, Move, AnsI, [text=Text])).
								if bel(number(Ans), Intent\='integer') then insert(answer(Minidialog, Move, Ans, [text=Text])).
								if bel(Ans\='', not(number(Ans)), downcase_atom(Ans, AnsD)) then insert(answer(Minidialog, Move, AnsD, [text=Text])).
								if bel(Ans='') then repair(Minidialog,Move). %Log
							}
							if bel(length(Params, 0)) then insert(answer(Minidialog, Move, Intent, [text=Text])).
						}
											
					% quiz questions -> checks whether the answer is correct or not.
					if bel(Type=quiz, length(Params, 1), member((_=AnsC), Params),
						(number(AnsC), Intent='integer', Ans is integer(AnsC); number(AnsC), Intent\='integer', Ans is AnsC; not(number(AnsC)), downcase_atom(AnsC, Ans)),
						keyValue(Minidialog, Move, correctAnswer, CorrectAnswerB), maplist(downcase_atom, CorrectAnswerB, CorrectAnswer))
						then {
							if bel(Ans\='', member(Ans, CorrectAnswer))
								then insert(answer(Minidialog, Move, correct, [entity=Ans, text=Text])).
							if bel(Ans\='', not(member(Ans, CorrectAnswer)))
								then insert(answer(Minidialog, Move, incorrect, [entity=Ans, text=Text])).
							if bel(Ans='') then repair(Minidialog,Move). %Log
						}
					
					if bel(Type=openend, length(Params, 0))
						then {
							if bel(Text\='') then insert(answer(Minidialog, Move, any, [text=Text])).
							
							if bel(Text='') then insert(answer(Minidialog, Move, failure, [text=''])).
						}
						
					if bel(not(answer(Minidialog,Move, _, _)))
						then print("Error: no answer was found although it was expected") + log(noAnswerError(Minidialog, Move, Intent, Params)).
				}
				
			if bel(currentInputModality(feet))
				then {
			
					if true then delete(waitingForAnswer) + canceltimer(Move) + setLedColor(['LeftFootLeds', 'RightFootLeds'], ['white', 'white']) + logging([minidialog=Minidialog, move=Move, action=userResponse, text=Text, intent=Intent, params=Params, modality=feet, currentAttempt=CurrentAttempt]).
					
					if bel(Type=yesno)
						then insert(answer(Minidialog, Move, Intent, [text=Intent])).
					
					if bel(Type \= yesno, Intent = 'answer_yes', keyValue(Minidialog, Move, options, Options), mcCounter(Count), nth0(Count, Options, AnsB), downcase_atom(AnsB, Ans))
						then {
							if bel(Type=input)
								then insert(answer(Minidialog, Move, Ans, [text=Ans])).
							
							if bel(Type=quiz, keyValue(Minidialog, Move, correctAnswer, CorrectAnswerB), maplist(downcase_atom, CorrectAnswerB, CorrectAnswer))
								then {
									if bel(member(Ans, CorrectAnswer))
										then insert(answer(Minidialog, Move, correct, [entity=Ans, text=Ans])).
									if bel(not(member(Ans, CorrectAnswer)))
										then insert(answer(Minidialog, Move, incorrect, [entity=Ans, text=Ans])).
								}
						}
					
					if bel(Type \= yesno, Intent = 'answer_no')
						then repair(Minidialog,Move).
				}
			
			if bel(currentInputModality(tablet))
				then {
					if true then delete(waitingForAnswer) 
						+ logging([minidialog=Minidialog, move=Move, action=userResponse, text=Text, intent=Intent, params=Params, modality=tablet, currentAttempt=CurrentAttempt]).
									
					% yesno questions -> answer_yes or answer_no are the expected answers.	
					if bel(Type = yesno, tablet_yesno(Ans, Intent)) then insert(answer(Minidialog, Move, Ans, [text=Text])).
						
					% input questions -> expects an entity to be returned.
					if bel(Type = input, downcase_atom(Intent, Ans)) then insert(answer(Minidialog, Move, Ans, [text=Text])).
						
					%if bel(Type = sorter) then insert(answer(Minidialog, Move, Intent, [text=Text])).
					
					% quiz questions -> checks whether the answer is correct or not.
					if bel(Type = quiz, downcase_atom(Intent, Ans), keyValue(Minidialog, Move, correctAnswer, CorrectAnswerB), maplist(downcase_atom, CorrectAnswerB, CorrectAnswer))
						then {
							if bel(member(Ans, CorrectAnswer))
								then insert(answer(Minidialog, Move, correct, [entity=Ans, text=Text])).
							if not(bel(answer(Minidialog, Move, correct, _)))
								then insert(answer(Minidialog, Move, incorrect, [entity=Ans, text=Text])).
							%if bel(Intent='answer_character', character(Old))
								%then delete(character(Old)) + insert(character(Ans)).
						}
						
					if not(bel(answer(Minidialog, Move, _, _)))
						then print("Error: no answer was found although it was expected") 
							+ log(noAnswerError(Minidialog, Move, Intent, Params)).
				}
		}
}