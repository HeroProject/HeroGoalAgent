use '../util/*.pl' as knowledge.
use '../topics/*.pl' as knowledge.
use '../topics/co_creation/*.pl' as knowledge.
use '../topics/robotstories/*.pl' as knowledge.
use '../topics/hospital/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.
use '../util/logging' as module.

module askQuestion(T, S) {
	if bel(currentAttempt(CurrentAttempt))
		then {
			% Start listening (with timeout by starting timer) and set waitingForAnswer flag.
			% when events have been completed (and we're not already waiting for an answer).
			% the first attempt has a different default waiting time than the noninitial attempts.
			if bel(currentInputModality(speech), keyListValues(T, S, [type, context], [Type, Context]),
					getMaxAnswerTime(T, S, speech, Type, CurrentAttempt, MaxAnswerTime), Time is MaxAnswerTime/1000)
				then startListening(Time, Context) + insert(waitingForAnswer).
			
			if bel(currentInputModality(feet), getMaxAnswerTime(T, S, feet, _, _, MaxAnswerTime))
				then {
					% Start timer for question state with a feet touch response and set waitingForAnswer flag.
					% when events have been completed (and we're not already waiting for an answer).
					if bel(keyValue(T, S, type, yesno))
						then starttimer(S,MaxAnswerTime,MaxAnswerTime) + insert(waitingForAnswer)
						+ setLedColor(['LeftFootLeds', 'RightFootLeds'], ['red', 'green']).
					% Cycle through multiple choice options, start timer for question state with a feet touch response and set waitingForAnswer flag.
					% when events have been completed (and we're not already waiting for an answer).	
					if bel(keyListValues(T, S, [type, options], [Type, Values]), Type \= yesno,
							mcCounter(C), nth0(C, Values, Value), atom_string(Value, String))
						then say(String) + starttimer(S, MaxAnswerTime, MaxAnswerTime) + insert(waitingForAnswer)
						+ setLedColor(['LeftFootLeds', 'RightFootLeds'], ['red', 'green']).
				}
				
			if bel(currentInputModality(tablet))
				then {
					if bel(keyValue(T, S, type, yesno), text(T, S, Txt), text(Txt, HTxt),  
							buttons(['Ja', 'Nee'], B), atom_concat(HTxt, B, TandB), html(TandB, Html))
						then renderPage(Html) + insert(waitingForAnswer).
					if bel(keyListValues(T, S, [type, options, question], [quiz, List, Txt]), text(Txt, HTxt), 
							buttons(List, B), atom_concat(HTxt, B, TandB), html(TandB, Html))
						then renderPage(Html) + insert(waitingForAnswer).
					if bel(keyListValues(T, S, [type, options], [input, List]), buttons(List, B), html(B, Html))
						then renderPage(Html) + insert(waitingForAnswer).
					if bel(keyListValues(T, S, [type, options], [sorter, List]), sortItems(List, Items), html(Items, Html))
						then renderPage(Html) + insert(waitingForAnswer).
				}
		}
}