use '../util/*.pl' as knowledge.
use '../minidialogs/*.pl' as knowledge.
use '../minidialogs/co_creation/*.pl' as knowledge.
use '../minidialogs/robotstories/*.pl' as knowledge.
use '../minidialogs/hero/*.pl' as knowledge.
use '../minidialogs/hero/chitchat/*.pl' as knowledge.
use '../minidialogs/hero/narrative/*.pl' as knowledge.
use '../minidialogs/hero/functional/*.pl' as knowledge.
use '../minidialogs/hero/hospital/*.pl' as knowledge.
use '../minidialogs/hero/co_regulation/*.pl' as knowledge.
use '../minidialogs/hero/stories/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.
use '../util/logging' as module.

module selectRobotResponse(Minidialog, Move, Ans, Data) {

	if bel(keyValue(Minidialog, Move, type, Type), nextCondition(Condition), userId(UserId), (keyValue(Minidialog, Move, umVariable, Key); not(keyValue(Minidialog, Move, umVariable, _)), generateKeyFromMinidialogAndMove(Minidialog, Move, Key)))
		then {
			% the default nextCondition will be replaced.
			if true then delete(nextCondition(Condition)).
			
			% If no answer was given
			if bel(Ans=failure)
				then {
					%The next condition is given the 'fail'  flag.
					if bel(currentInputModality(CurrentModality), currentAttempt(CurrentAttempt)) 
						then insert(nextCondition('fail')) + logging([minidialog=Minidialog, move=Move, action=questionFinalResult, questionType=Type, result=failure, finalModality=CurrentModality, finalAttempt=CurrentAttempt]).
					
					%If a default answer is provided for an input question, that is stored userModel key-value list
					if bel(keyValue(Minidialog, Move, defaultAnswer, DefaultAns), userModel(UserModel), updateUserModel(Key, DefaultAns, UserModel, UpdatedUserModel))
						then delete(userModel(UserModel)) + insert(userModel(UpdatedUserModel)) + setInteractantData(UserId, Key, DefaultAns).	
				}
			
			% If an answer was given
			if bel(Ans \= failure)
				then {
					%if the type of question was yesno, the answer (answer_yes or answer_no) is used as flag for the move transition.
					if bel(Type=yesno) then {
						if bel(userModel(UserModel),  updateUserModel(Key, Ans, UserModel, UpdatedUserModel)) 
							then delete(userModel(UserModel)) + insert(userModel(UpdatedUserModel), nextCondition(Ans)) + setInteractantData(UserId, Key, Ans). 
						
						if bel(keyValue(Minidialog, Move, topics, Topics), topicsOfInterest(ToI), addToTopicsOfInterest(Topics, ToI, UpdatedToI), ord_subtract(UpdatedToI, ToI, AddedTopics), not(length(AddedTopics, 0)))
							then delete(topicsOfInterest(ToI)) + insert(topicsOfInterest(UpdatedToI)) + setTopicsOfInterest(UserId, AddedTopics).
					}
						
					%if the type of question was a input question, the 'success' flag is used and the user input is stored in the userModel key-value list.
					if bel(Type=input, userModel(UserModel), updateUserModel(Key, Ans, UserModel, UpdatedUserModel)) then 
					{
						if true then delete(userModel(UserModel)) + insert(userModel(UpdatedUserModel)) + setInteractantData(UserId, Key, Ans).
						
						if bel(next(Minidialog, Move, Ans, _)) then insert(nextCondition(Ans)).
						if bel(not(next(Minidialog, Move, Ans, _)), next(Minidialog, Move, "_others", _)) then insert(nextCondition("_others")).
						if bel(not(next(Minidialog, Move, Ans, _)), not(next(Minidialog, Move, "_others", _))) then insert(nextCondition("success")).
						
						if bel(keyValue(Minidialog, Move, topics, Topics), topicsOfInterest(ToI), addToTopicsOfInterest(Topics, Ans, ToI, UpdatedToI), ord_subtract(UpdatedToI, ToI, AddedTopics), not(length(AddedTopics, 0))) 
							then delete(topicsOfInterest(ToI)) + insert(topicsOfInterest(UpdatedToI)) + setTopicsOfInterest(UserId, AddedTopics).
					}
					
					%for quiz questions
					if bel(Type=quiz, userModel(UserModel), member((entity=Entity), Data), updateUserModel(Key, Entity, UserModel, UpdatedUserModel))
						then delete(userModel(UserModel)) + insert(nextCondition(Ans), userModel(UpdatedUserModel)) + setInteractantData(UserId, Key, Entity).
					%for open questions
					if bel(Type=openend)
						then insert(nextCondition('success')).
					
					%Logging
					if bel(member((text=Text), Data), currentInputModality(CurrentModality), currentAttempt(CurrentAttempt))
						then logging([minidialog=Minidialog, move=Move, action=questionFinalResult, questionType=Type, result=Ans, text=Text, finalModality=CurrentModality, finalAttempt=CurrentAttempt]).
				}
						
			% Flag that the answer has been processed.
			if true then insert(answerProcessed).
		}
	
}