use '../util/*.pl' as knowledge.
use '../minidialogs/*.pl' as knowledge.
use '../minidialogs/co_creation/*.pl' as knowledge.
use '../minidialogs/robotstories/*.pl' as knowledge.
use '../minidialogs/hero/*.pl' as knowledge.
use '../minidialogs/hero/chitchat/*.pl' as knowledge.
use '../minidialogs/hero/narrative/*.pl' as knowledge.
use '../minidialogs/hero/functional/*.pl' as knowledge.
use '../minidialogs/hero/hospital/*.pl' as knowledge.
use '../minidialogs/hero/co_regulation/*.pl' as knowledge.
use '../minidialogs/hero/stories/*.pl' as knowledge.
use '../sessions' as knowledge.
use '../hero_actions' as actionspec.
use modalitySwitch as module.

% add started to call
module repair(Minidialog, Move) {
	if bel(getInputModalityOrder(Minidialog, Move, Order), modalityCounter(ModCount), currentAttempt(CurrentAttempt), started)
		then {
		
			% SPEECH %
			if bel(currentInputModality(speech), getMaxAnswerAttempts(Minidialog, Move, speech, MaxAnswerAttempts))
				then {
					%If the number of attempts are reached.
					if bel(CurrentAttempt >= MaxAnswerAttempts, length(Order, NModalities), NewModCount is ModCount + 1)
						then {
							%If there are no repair modalities left and the user is not entitled to an additional attempt: return a failure.
							if bel(NModalities = NewModCount, not(additionalAttempt(Minidialog, Move)))
								then delete(waitingForAnswer) + insert(answer(Minidialog, Move, failure, [])).
								
							% If there are other input modalities left and the user is not entiteled to an addtional attempt: switch modalities.
							if bel(NModalities \= NewModCount, not(additionalAttempt(Minidialog, Move)), nth0(NewModCount, Order, NewModality))	
								then modalitySwitch(Minidialog, Move, NewModality).
							
							%If the user is entiteled to an addtional attempt: give extra attempt 
							if bel(additionalAttempt(Minidialog, Move), NextAttempt is CurrentAttempt + 1)
								then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt), additionalAttempt(Minidialog, Move))
								+ insert(start, currentAttempt(NextAttempt)).
						}				
										
					%If the number of attempts are not reached, the user will get a next speech recognition attempt.
					if bel(CurrentAttempt < MaxAnswerAttempts, NextAttempt is CurrentAttempt + 1, currentInputModality(speech), started)
						then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt)) + insert(start, currentAttempt(NextAttempt)).
			}

			% FEET %
			if bel(currentInputModality(feet), keyValue(Minidialog, Move, type, Type), getMaxAnswerAttempts(Minidialog, Move, feet, MaxAnswerAttempts), started)
				then {
					if true then setLedColor(['LeftFootLeds', 'RightFootLeds'], ['white', 'white']).
					
					if bel(Type = yesno)
						then {
							%If the number of attempts are reached.
							if bel(CurrentAttempt >= MaxAnswerAttempts, length(Order, NModalities), NewModCount is ModCount + 1)
								then {
									% If there are no other input modalities, this question failed.
									if bel(NModalities = NewModCount)
						 				then delete(waitingForAnswer) + insert(answer(Minidialog, Move, failure, [])).
									% If there are other input modalities left, switch modalities.
									if bel(NModalities \= NewModCount, nth0(NewModCount, Order, NewModality))	
										then modalitySwitch(Minidialog, Move, NewModality).
								}
							if bel(CurrentAttempt < MaxAnswerAttempts, NextAttempt is CurrentAttempt + 1)
								then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt)) + 
									insert(start, currentAttempt(NextAttempt)).
						}
				
					if bel(Type \= yesno, mcCounter(Count), CountNew is Count + 1, keyValue(Minidialog, Move, options, Options), length(Options, NOptions))
						then {						
							if bel(CountNew >= NOptions)
								then {
									%If the number of attempts are reached.
									if bel(started, CurrentAttempt >= MaxAnswerAttempts, length(Order, NModalities), NewModCount is ModCount + 1)
										then {
											% If there are no other input modalities, this question failed.
											if bel(NModalities = NewModCount)
								 				then delete(waitingForAnswer) + insert(answer(Minidialog, Move, failure, [])).
											% If there are other input modalities left, switch modalities.
											if bel(NModalities \= NewModCount, nth0(NewModCount, Order, NewModality))	
												then modalitySwitch(Minidialog, Move, NewModality).
										}
									
									%If the number of attempts are not reached, the user will get a next feet recognition attempt.
									if bel(CurrentAttempt < MaxAnswerAttempts, NextAttempt is CurrentAttempt + 1, currentInputModality(feet), started)
										then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt), mcCounter(Count)) + 
											insert(start, currentAttempt(NextAttempt), mcCounter(0)).
								}
							if bel(CountNew < NOptions)
								then delete(mcCounter(Count), waitingForAnswer) + insert(mcCounter(CountNew)).
						}
				}
			
			% TABLET %
			if bel(currentInputModality(tablet), getMaxAnswerAttempts(Minidialog, Move, tablet, MaxAnswerAttempts), started)
				then {
					%If the number of attempts are reached.
					if bel(CurrentAttempt >= MaxAnswerAttempts, length(Order, NModalities), NewModCount is ModCount + 1)
						then {
							% If there are no other input modalities, this question failed.
							if bel(NModalities = NewModCount)
				 				then delete(waitingForAnswer) + insert(answer(Minidialog, Move, failure, [])).
							% If there are other input modalities left, switch modalities.
							if bel(NModalities \= NewModCount, nth0(NewModCount, Order, NewModality))	
								then modalitySwitch(Minidialog, Move, NewModality).
						}
					
					%If the number of attempts are not reached, the user will get a next tablet recognition attempt.
					if bel(CurrentAttempt < MaxAnswerAttempts, NextAttempt is CurrentAttempt + 1, started)
						then delete(started, waitingForAnswer, currentAttempt(CurrentAttempt)) + 
							insert(start, currentAttempt(NextAttempt)).
				}
		}
}